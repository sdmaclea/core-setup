From c3bc5857110bafc2238a5954eb5fd4da36388203 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Wed, 6 Dec 2017 13:40:15 -0500
Subject: [PATCH] [Arm64] Define ISA feature flags

---
 src/inc/corinfo.h | 27 ++++++---------------------
 src/inc/corjit.h  | 56 +++++++++++++++++++++++++++++++++++++++++++++++++------
 src/jit/jitee.h   | 55 +++++++++++++++++++++++++++++++++++++++++++++++++-----
 3 files changed, 106 insertions(+), 32 deletions(-)

diff --git a/src/inc/corinfo.h b/src/inc/corinfo.h
index 264cde6..09e622a 100644
--- a/src/inc/corinfo.h
+++ b/src/inc/corinfo.h
@@ -213,11 +213,11 @@ TODO: Talk about initializing strutures before use
     #define SELECTANY extern __declspec(selectany)
 #endif
 
-SELECTANY const GUID JITEEVersionIdentifier = { /* EBEE9A84-63C3-4610-9E4F-05491D335D67 */
-    0xebee9a84, 
-    0x63c3, 
-    0x4610, 
-    { 0x9e, 0x4f, 0x5, 0x49, 0x1d, 0x33, 0x5d, 0x67 } 
+SELECTANY const GUID JITEEVersionIdentifier = { /* 01c3d216-a404-4290-8278-ac27a4793d31 */
+    0x01c3d216,
+    0xa404,
+    0x4290,
+    {0x82, 0x78, 0xac, 0x27, 0xa4, 0x79, 0x3d, 0x31}
 };
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -809,7 +809,7 @@ enum CorInfoFlag
     CORINFO_FLG_VIRTUAL               = 0x00000040,
 //  CORINFO_FLG_UNUSED                = 0x00000080,
     CORINFO_FLG_NATIVE                = 0x00000100,
-    CORINFO_FLG_INTRINSIC_TYPE        = 0x00000200, // This type is marked by [Intrinsic]
+//  CORINFO_FLG_UNUSED                = 0x00000200,
     CORINFO_FLG_ABSTRACT              = 0x00000400,
 
     CORINFO_FLG_EnC                   = 0x00000800, // member was added by Edit'n'Continue
@@ -2281,21 +2281,6 @@ public:
             CORINFO_CLASS_HANDLE    cls
             ) = 0;
 
-    // Return class name as in metadata, or nullptr if there is none.
-    // Suitable for non-debugging use.
-    virtual const char* getClassNameFromMetadata (
-            CORINFO_CLASS_HANDLE    cls,
-            const char            **namespaceName   /* OUT */
-            ) = 0;
-
-    // Return the type argument of the instantiated generic class,
-    // which is specified by the index
-    virtual CORINFO_CLASS_HANDLE getTypeInstantiationArgument(
-            CORINFO_CLASS_HANDLE cls, 
-            unsigned             index
-            ) = 0;
-    
-
     // Append a (possibly truncated) representation of the type cls to the preallocated buffer ppBuf of length pnBufLen
     // If fNamespace=TRUE, include the namespace/enclosing classes
     // If fFullInst=TRUE (regardless of fNamespace and fAssembly), include namespace and assembly for any type parameters
diff --git a/src/inc/corjit.h b/src/inc/corjit.h
index 6f217f1..91cfb26 100644
--- a/src/inc/corjit.h
+++ b/src/inc/corjit.h
@@ -161,7 +161,31 @@ public:
 
         CORJIT_FLAG_NO_INLINING             = 42, // JIT should not inline any called method into this method
 
-#if defined(_TARGET_X86_) || defined(_TARGET_AMD64_)
+#if defined(_TARGET_ARM64_)
+
+        CORJIT_FLAG_HAS_ARM64_AES           = 43, // ID_AA64ISAR0_EL1.AES is 1 or better
+        CORJIT_FLAG_HAS_ARM64_ATOMICS       = 44, // ID_AA64ISAR0_EL1.Atomic is 2 or better
+        CORJIT_FLAG_HAS_ARM64_CRC32         = 45, // ID_AA64ISAR0_EL1.CRC32 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_DCPOP         = 46, // ID_AA64ISAR1_EL1.DPB is 1 or better
+        CORJIT_FLAG_HAS_ARM64_DP            = 47, // ID_AA64ISAR0_EL1.DP is 1 or better
+        CORJIT_FLAG_HAS_ARM64_FCMA          = 48, // ID_AA64ISAR1_EL1.FCMA is 1 or better
+        CORJIT_FLAG_HAS_ARM64_FP            = 49, // ID_AA64PFR0_EL1.FP is 0 or better
+        CORJIT_FLAG_HAS_ARM64_FP16          = 50, // ID_AA64PFR0_EL1.FP is 1 or better
+        CORJIT_FLAG_HAS_ARM64_JSCVT         = 51, // ID_AA64ISAR1_EL1.JSCVT is 1 or better
+        CORJIT_FLAG_HAS_ARM64_LRCPC         = 52, // ID_AA64ISAR1_EL1.LRCPC is 1 or better
+        CORJIT_FLAG_HAS_ARM64_PMULL         = 53, // ID_AA64ISAR0_EL1.AES is 2 or better
+        CORJIT_FLAG_HAS_ARM64_SHA1          = 54, // ID_AA64ISAR0_EL1.SHA1 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SHA2          = 55, // ID_AA64ISAR0_EL1.SHA2 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SHA512        = 56, // ID_AA64ISAR0_EL1.SHA2 is 2 or better
+        CORJIT_FLAG_HAS_ARM64_SHA3          = 57, // ID_AA64ISAR0_EL1.SHA3 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SIMD          = 58, // ID_AA64PFR0_EL1.AdvSIMD is 0 or better
+        CORJIT_FLAG_HAS_ARM64_SIMD_V81      = 59, // ID_AA64ISAR0_EL1.RDM is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SIMD_FP16     = 60, // ID_AA64PFR0_EL1.AdvSIMD is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SM3           = 61, // ID_AA64ISAR0_EL1.SM3 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SM4           = 62, // ID_AA64ISAR0_EL1.SM4 is 1 or better
+        CORJIT_FLAG_HAS_ARM64_SVE           = 63  // ID_AA64PFR0_EL1.SVE is 1 or better
+
+#elif defined(_TARGET_X86_) || defined(_TARGET_AMD64_)
 
         CORJIT_FLAG_USE_SSE3                = 43,
         CORJIT_FLAG_USE_SSSE3               = 44,
@@ -173,10 +197,20 @@ public:
         CORJIT_FLAG_USE_FMA                 = 50,
         CORJIT_FLAG_USE_LZCNT               = 51,
         CORJIT_FLAG_USE_PCLMULQDQ           = 52,
-        CORJIT_FLAG_USE_POPCNT              = 53
+        CORJIT_FLAG_USE_POPCNT              = 53,
+        CORJIT_FLAG_UNUSED23                = 54,
+        CORJIT_FLAG_UNUSED24                = 55,
+        CORJIT_FLAG_UNUSED25                = 56,
+        CORJIT_FLAG_UNUSED26                = 57,
+        CORJIT_FLAG_UNUSED27                = 58,
+        CORJIT_FLAG_UNUSED28                = 59,
+        CORJIT_FLAG_UNUSED29                = 60,
+        CORJIT_FLAG_UNUSED30                = 61,
+        CORJIT_FLAG_UNUSED31                = 62,
+        CORJIT_FLAG_UNUSED32                = 63
         
 
-#else // !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
+#else // !defined(_TARGET_ARM64_) && !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
 
         CORJIT_FLAG_UNUSED12                = 43,
         CORJIT_FLAG_UNUSED13                = 44,
@@ -188,9 +222,19 @@ public:
         CORJIT_FLAG_UNUSED19                = 50,
         CORJIT_FLAG_UNUSED20                = 51,
         CORJIT_FLAG_UNUSED21                = 52,
-        CORJIT_FLAG_UNUSED22                = 53
-
-#endif // !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
+        CORJIT_FLAG_UNUSED22                = 53,
+        CORJIT_FLAG_UNUSED23                = 54,
+        CORJIT_FLAG_UNUSED24                = 55,
+        CORJIT_FLAG_UNUSED25                = 56,
+        CORJIT_FLAG_UNUSED26                = 57,
+        CORJIT_FLAG_UNUSED27                = 58,
+        CORJIT_FLAG_UNUSED28                = 59,
+        CORJIT_FLAG_UNUSED29                = 60,
+        CORJIT_FLAG_UNUSED30                = 61,
+        CORJIT_FLAG_UNUSED31                = 62,
+        CORJIT_FLAG_UNUSED32                = 63
+
+#endif // !defined(_TARGET_ARM64_) && !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
     };
 
     CORJIT_FLAGS()
diff --git a/src/jit/jitee.h b/src/jit/jitee.h
index 3da1093..c46416c 100644
--- a/src/jit/jitee.h
+++ b/src/jit/jitee.h
@@ -93,7 +93,31 @@ public:
 
         JIT_FLAG_NO_INLINING             = 42, // JIT should not inline any called method into this method
 
-#if defined(_TARGET_X86_) || defined(_TARGET_AMD64_)
+#if defined(_TARGET_ARM64_)
+
+        JIT_FLAG_HAS_ARM64_AES           = 43, // ID_AA64ISAR0_EL1.AES is 1 or better
+        JIT_FLAG_HAS_ARM64_ATOMICS       = 44, // ID_AA64ISAR0_EL1.Atomic is 2 or better
+        JIT_FLAG_HAS_ARM64_CRC32         = 45, // ID_AA64ISAR0_EL1.CRC32 is 1 or better
+        JIT_FLAG_HAS_ARM64_DCPOP         = 46, // ID_AA64ISAR1_EL1.DPB is 1 or better
+        JIT_FLAG_HAS_ARM64_DP            = 47, // ID_AA64ISAR0_EL1.DP is 1 or better
+        JIT_FLAG_HAS_ARM64_FCMA          = 48, // ID_AA64ISAR1_EL1.FCMA is 1 or better
+        JIT_FLAG_HAS_ARM64_FP            = 49, // ID_AA64PFR0_EL1.FP is 0 or better
+        JIT_FLAG_HAS_ARM64_FP16          = 50, // ID_AA64PFR0_EL1.FP is 1 or better
+        JIT_FLAG_HAS_ARM64_JSCVT         = 51, // ID_AA64ISAR1_EL1.JSCVT is 1 or better
+        JIT_FLAG_HAS_ARM64_LRCPC         = 52, // ID_AA64ISAR1_EL1.LRCPC is 1 or better
+        JIT_FLAG_HAS_ARM64_PMULL         = 53, // ID_AA64ISAR0_EL1.AES is 2 or better
+        JIT_FLAG_HAS_ARM64_SHA1          = 54, // ID_AA64ISAR0_EL1.SHA1 is 1 or better
+        JIT_FLAG_HAS_ARM64_SHA2          = 55, // ID_AA64ISAR0_EL1.SHA2 is 1 or better
+        JIT_FLAG_HAS_ARM64_SHA512        = 56, // ID_AA64ISAR0_EL1.SHA2 is 2 or better
+        JIT_FLAG_HAS_ARM64_SHA3          = 57, // ID_AA64ISAR0_EL1.SHA3 is 1 or better
+        JIT_FLAG_HAS_ARM64_SIMD          = 58, // ID_AA64PFR0_EL1.AdvSIMD is 0 or better
+        JIT_FLAG_HAS_ARM64_SIMD_V81      = 59, // ID_AA64ISAR0_EL1.RDM is 1 or better
+        JIT_FLAG_HAS_ARM64_SIMD_FP16     = 60, // ID_AA64PFR0_EL1.AdvSIMD is 1 or better
+        JIT_FLAG_HAS_ARM64_SM3           = 61, // ID_AA64ISAR0_EL1.SM3 is 1 or better
+        JIT_FLAG_HAS_ARM64_SM4           = 62, // ID_AA64ISAR0_EL1.SM4 is 1 or better
+        JIT_FLAG_HAS_ARM64_SVE           = 63  // ID_AA64PFR0_EL1.SVE is 1 or better
+
+#elif defined(_TARGET_X86_) || defined(_TARGET_AMD64_)
 
         JIT_FLAG_USE_SSE3                = 43,
         JIT_FLAG_USE_SSSE3               = 44,
@@ -105,10 +129,20 @@ public:
         JIT_FLAG_USE_FMA                 = 50,
         JIT_FLAG_USE_LZCNT               = 51,
         JIT_FLAG_USE_PCLMULQDQ           = 52,
-        JIT_FLAG_USE_POPCNT              = 53
+        JIT_FLAG_USE_POPCNT              = 53,
+        JIT_FLAG_UNUSED23                = 54,
+        JIT_FLAG_UNUSED24                = 55,
+        JIT_FLAG_UNUSED25                = 56,
+        JIT_FLAG_UNUSED26                = 57,
+        JIT_FLAG_UNUSED27                = 58,
+        JIT_FLAG_UNUSED28                = 59,
+        JIT_FLAG_UNUSED29                = 60,
+        JIT_FLAG_UNUSED30                = 61,
+        JIT_FLAG_UNUSED31                = 62,
+        JIT_FLAG_UNUSED32                = 63
         
 
-#else // !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
+#else // !defined(_TARGET_ARM64_) && !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
 
         JIT_FLAG_UNUSED12                = 43,
         JIT_FLAG_UNUSED13                = 44,
@@ -120,9 +154,20 @@ public:
         JIT_FLAG_UNUSED19                = 50,
         JIT_FLAG_UNUSED20                = 51,
         JIT_FLAG_UNUSED21                = 52,
-        JIT_FLAG_UNUSED22                = 53
+        JIT_FLAG_UNUSED22                = 53,
+        JIT_FLAG_UNUSED23                = 54,
+        JIT_FLAG_UNUSED24                = 55,
+        JIT_FLAG_UNUSED25                = 56,
+        JIT_FLAG_UNUSED26                = 57,
+        JIT_FLAG_UNUSED27                = 58,
+        JIT_FLAG_UNUSED28                = 59,
+        JIT_FLAG_UNUSED29                = 60,
+        JIT_FLAG_UNUSED30                = 61,
+        JIT_FLAG_UNUSED31                = 62,
+        JIT_FLAG_UNUSED32                = 63
+
+#endif // !defined(_TARGET_ARM64_) && !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
 
-#endif // !defined(_TARGET_X86_) && !defined(_TARGET_AMD64_)
     };
     // clang-format on
 
-- 
2.7.4

