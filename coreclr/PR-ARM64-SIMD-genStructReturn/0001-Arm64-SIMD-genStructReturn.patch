From 6db2f0b8986a3daf4555d81f7cc3b4ee8dee7aca Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Tue, 7 Nov 2017 12:45:58 -0500
Subject: [PATCH] [Arm64] SIMD genStructReturn

---
 src/jit/codegenarmarch.cpp | 36 ++++++++++++++++++++++++++++++++----
 1 file changed, 32 insertions(+), 4 deletions(-)

diff --git a/src/jit/codegenarmarch.cpp b/src/jit/codegenarmarch.cpp
index 758dd0b..fbf82cf 100644
--- a/src/jit/codegenarmarch.cpp
+++ b/src/jit/codegenarmarch.cpp
@@ -3626,9 +3626,7 @@ void CodeGen::genStructReturn(GenTreePtr treeNode)
         LclVarDsc*           varDsc  = &(compiler->lvaTable[lclVar->gtLclNum]);
         var_types            lclType = genActualType(varDsc->TypeGet());
 
-        // Currently only multireg TYP_STRUCT types such as HFA's(ARM32, ARM64) and 16-byte structs(ARM64) are supported
-        // In the future we could have FEATURE_SIMD types like TYP_SIMD16
-        assert(lclType == TYP_STRUCT);
+        assert(varTypeIsStruct(lclType));
         assert(varDsc->lvIsMultiRegRet);
 
         ReturnTypeDesc retTypeDesc;
@@ -3638,8 +3636,11 @@ void CodeGen::genStructReturn(GenTreePtr treeNode)
         regCount = retTypeDesc.GetReturnRegCount();
 
         assert(regCount >= 2);
-        assert(op1->isContained());
 
+        assert(varTypeIsSIMD(lclType) || op1->isContained());
+
+        if (op1->isContained())
+        {
             // Copy var on stack into ABI return registers
             // TODO: It could be optimized by reducing two float loading to one double
             int offset = 0;
@@ -3651,6 +3652,33 @@ void CodeGen::genStructReturn(GenTreePtr treeNode)
                 offset += genTypeSize(type);
             }
         }
+        else
+        {
+            // Only SIMD types are not required to be contained
+            assert(varTypeIsSIMD(lclType));
+
+            NYI_ARM("SIMD genStructReturn");
+
+#ifdef _TARGET_ARM64_
+            genConsumeRegs(op1);
+            regNumber src = op1->gtRegNum;
+
+            for (unsigned i = 0; i < regCount; ++i)
+            {
+                var_types type = retTypeDesc.GetReturnRegType(i);
+                regNumber reg  = retTypeDesc.GetABIReturnReg(i);
+                if (varTypeIsFloating(type))
+                {
+                    getEmitter()->emitIns_R_R_I_I(INS_mov, emitTypeSize(type), reg, src, 0, i);
+                }
+                else
+                {
+                    getEmitter()->emitIns_R_R_I(INS_mov, emitTypeSize(type), reg, src, i);
+                }
+            }
+#endif // _TARGET_ARM64_
+        }
+    }
     else // op1 must be multi-reg GT_CALL
     {
         assert(op1->IsMultiRegCall() || op1->IsCopyOrReloadOfMultiRegCall());
-- 
2.7.4

