From 6198c06d5f32a9b822b80e11c2980ae412af6df0 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Tue, 19 Sep 2017 12:39:20 -0400
Subject: [PATCH] [Arm64] Add lower to cbz, cbnz, tbz, or tbnz

---
 src/jit/emit.cpp      |  10 ++---
 src/jit/emitarm64.cpp | 120 +++++++++++++++++++++++++++++++++++++++++++++++---
 src/jit/emitarm64.h   |  15 ++-----
 src/jit/target.h      |   3 ++
 4 files changed, 125 insertions(+), 23 deletions(-)

diff --git a/src/jit/emit.cpp b/src/jit/emit.cpp
index f579aee..4fc97bb 100644
--- a/src/jit/emit.cpp
+++ b/src/jit/emit.cpp
@@ -3647,8 +3647,10 @@ AGAIN:
         if (emitIsCondJump(jmp))
         {
             ssz         = JCC_SIZE_SMALL;
-            nsd = JCC_DIST_SMALL_MAX_NEG;
-            psd = JCC_DIST_SMALL_MAX_POS;
+            bool isTest = (jmp->idIns() == INS_tbz) || (jmp->idIns() == INS_tbnz);
+
+            nsd = (isTest) ? TB_DIST_SMALL_MAX_NEG : JCC_DIST_SMALL_MAX_POS;
+            psd = (isTest) ? TB_DIST_SMALL_MAX_POS : JCC_DIST_SMALL_MAX_POS;
         }
         else if (emitIsUncondJump(jmp))
         {
@@ -3656,10 +3658,6 @@ AGAIN:
             assert(jmp->idjShort);
             ssz = JMP_SIZE_SMALL;
         }
-        else if (emitIsCmpJump(jmp))
-        {
-            NYI("branch shortening compare-and-branch instructions");
-        }
         else if (emitIsLoadLabel(jmp))
         {
             ssz = LBL_SIZE_SMALL;
diff --git a/src/jit/emitarm64.cpp b/src/jit/emitarm64.cpp
index 6c9d61c..d3c051a 100644
--- a/src/jit/emitarm64.cpp
+++ b/src/jit/emitarm64.cpp
@@ -6691,8 +6691,20 @@ void emitter::emitSetShortJump(instrDescJmp* id)
     insFormat fmt = IF_NONE;
     if (emitIsCondJump(id))
     {
+        switch (id->idIns())
+        {
+            case INS_cbz:
+            case INS_cbnz:
+                fmt = IF_BI_1A;
+                break;
+            case INS_tbz:
+            case INS_tbnz:
+                fmt = IF_BI_1B;
+                break;
+            default:
                 fmt = IF_BI_0B;
         }
+    }
     else if (emitIsLoadLabel(id))
     {
         fmt = IF_DI_1E;
@@ -6784,7 +6796,77 @@ void emitter::emitIns_R_D(instruction ins, emitAttr attr, unsigned offs, regNumb
 
 void emitter::emitIns_J_R(instruction ins, emitAttr attr, BasicBlock* dst, regNumber reg)
 {
-    NYI("emitIns_J_R");
+    assert((ins == INS_cbz) || (ins == INS_cbnz));
+
+    assert(dst && (dst->bbFlags & BBF_JMP_TARGET));
+
+    insFormat fmt = IF_LARGEJMP;
+
+    instrDescJmp* id = emitNewInstrJmp();
+
+    id->idIns(ins);
+    id->idInsFmt(fmt);
+    id->idReg1(reg);
+    id->idjShort = false;
+    id->idOpSize(EA_SIZE(attr));
+
+    id->idAddr()->iiaBBlabel = dst;
+    id->idjKeepLong          = emitComp->fgInDifferentRegions(emitComp->compCurBB, dst);
+
+    /* Record the jump's IG and offset within it */
+
+    id->idjIG   = emitCurIG;
+    id->idjOffs = emitCurIGsize;
+
+    /* Append this jump to this IG's jump list */
+
+    id->idjNext      = emitCurIGjmpList;
+    emitCurIGjmpList = id;
+
+#if EMITTER_STATS
+    emitTotalIGjmps++;
+#endif
+
+    dispIns(id);
+    appendToCurIG(id);
+}
+
+void emitter::emitIns_J_R_I(instruction ins, emitAttr attr, BasicBlock* dst, regNumber reg, int imm)
+{
+    assert((ins == INS_tbz) || (ins == INS_tbnz));
+
+    assert(dst && (dst->bbFlags & BBF_JMP_TARGET));
+
+    insFormat fmt = IF_LARGEJMP;
+
+    instrDescJmp* id = emitNewInstrJmp();
+
+    id->idIns(ins);
+    id->idInsFmt(fmt);
+    id->idReg1(reg);
+    id->idjShort = false;
+    id->idSmallCns(imm & 0x3f);
+    id->idOpSize(EA_SIZE(attr));
+
+    id->idAddr()->iiaBBlabel = dst;
+    id->idjKeepLong          = emitComp->fgInDifferentRegions(emitComp->compCurBB, dst);
+
+    /* Record the jump's IG and offset within it */
+
+    id->idjIG   = emitCurIG;
+    id->idjOffs = emitCurIGsize;
+
+    /* Append this jump to this IG's jump list */
+
+    id->idjNext      = emitCurIGjmpList;
+    emitCurIGjmpList = id;
+
+#if EMITTER_STATS
+    emitTotalIGjmps++;
+#endif
+
+    dispIns(id);
+    appendToCurIG(id);
 }
 
 void emitter::emitIns_J(instruction ins, BasicBlock* dst, int instrCount)
@@ -8253,7 +8335,7 @@ BYTE* emitter::emitOutputLJ(insGroup* ig, BYTE* dst, instrDesc* i)
             // Short conditional/unconditional jump
             assert(!id->idjKeepLong);
             assert(emitJumpCrossHotColdBoundary(srcOffs, dstOffs) == false);
-            assert((fmt == IF_BI_0A) || (fmt == IF_BI_0B));
+            assert((fmt == IF_BI_0A) || (fmt == IF_BI_0B) || (fmt == IF_BI_1A) || (fmt == IF_BI_1B));
         }
         else
         {
@@ -8278,13 +8360,39 @@ BYTE* emitter::emitOutputLJ(insGroup* ig, BYTE* dst, instrDesc* i)
             // the correct offset. Note also that this works for both integer and floating-point conditions, because
             // the condition inversion takes ordered/unordered into account, preserving NaN behavior. For example,
             // "GT" (greater than) is inverted to "LE" (less than, equal, or unordered).
+
+            instruction revereIns;
+            insFormat   reverseFmt;
+
+            switch (ins)
+            {
+                case INS_cbz:
+                    revereIns  = INS_cbnz;
+                    reverseFmt = IF_BI_1A;
+                    break;
+                case INS_cbnz:
+                    revereIns  = INS_cbz;
+                    reverseFmt = IF_BI_1A;
+                    break;
+                case INS_tbz:
+                    revereIns  = INS_tbnz;
+                    reverseFmt = IF_BI_1B;
+                    break;
+                case INS_tbnz:
+                    revereIns  = INS_tbz;
+                    reverseFmt = IF_BI_1B;
+                    break;
+                default:
+                    revereIns  = emitJumpKindToIns(emitReverseJumpKind(emitInsToJumpKind(ins)));
+                    reverseFmt = IF_BI_0B;
+            }
+
             dst =
                 emitOutputShortBranch(dst,
-                                      emitJumpKindToIns(emitReverseJumpKind(
-                                          emitInsToJumpKind(ins))), // reverse the conditional instruction
-                                      IF_BI_0B,
+                                      revereIns, // reverse the conditional instruction
+                                      reverseFmt,
                                       8, /* 8 bytes from start of this large conditional pseudo-instruction to L_not. */
-                                      nullptr /* only used for tbz/tbnzcbz/cbnz */);
+                                      id);
 
             // Now, pretend we've got a normal unconditional branch, and fall through to the code to emit that.
             ins = INS_b;
diff --git a/src/jit/emitarm64.h b/src/jit/emitarm64.h
index ebebf51..87d9995 100644
--- a/src/jit/emitarm64.h
+++ b/src/jit/emitarm64.h
@@ -781,6 +781,8 @@ void emitIns_R_D(instruction ins, emitAttr attr, unsigned offs, regNumber reg);
 
 void emitIns_J_R(instruction ins, emitAttr attr, BasicBlock* dst, regNumber reg);
 
+void emitIns_J_R_I(instruction ins, emitAttr attr, BasicBlock* dst, regNumber reg, int imm);
+
 void emitIns_I_AR(
     instruction ins, emitAttr attr, int val, regNumber reg, int offs, int memCookie = 0, void* clsCookie = NULL);
 
@@ -856,17 +858,8 @@ BYTE* emitOutputShortConstant(
 
 inline bool emitIsCondJump(instrDesc* jmp)
 {
-    return ((jmp->idInsFmt() == IF_BI_0B) || (jmp->idInsFmt() == IF_LARGEJMP));
-}
-
-/*****************************************************************************
- *
- *  Given an instrDesc, return true if it's a compare and jump.
- */
-
-inline bool emitIsCmpJump(instrDesc* jmp)
-{
-    return ((jmp->idInsFmt() == IF_BI_1A) || (jmp->idInsFmt() == IF_BI_1B));
+    return ((jmp->idInsFmt() == IF_BI_0B) || (jmp->idInsFmt() == IF_BI_1A) || (jmp->idInsFmt() == IF_BI_1B) ||
+            (jmp->idInsFmt() == IF_LARGEJMP));
 }
 
 /*****************************************************************************
diff --git a/src/jit/target.h b/src/jit/target.h
index 68b27f2..c7a2937 100644
--- a/src/jit/target.h
+++ b/src/jit/target.h
@@ -1804,6 +1804,9 @@ typedef unsigned short regPairNoSmall; // arm: need 12 bits
   #define JCC_DIST_SMALL_MAX_NEG  (-1048576)
   #define JCC_DIST_SMALL_MAX_POS  (+1048575)
 
+  #define TB_DIST_SMALL_MAX_NEG   (-32768)
+  #define TB_DIST_SMALL_MAX_POS   (+32767)
+
   #define JCC_SIZE_SMALL          (4)
   #define JCC_SIZE_LARGE          (8)
 
-- 
2.7.4

