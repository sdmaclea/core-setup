From 02bf3a09b48551f0fcfd7422a18db1e8e65f736e Mon Sep 17 00:00:00 2001
From: Pat Gavlin <pagavlin@microsoft.com>
Date: Tue, 11 Jul 2017 08:06:49 -0700
Subject: [PATCH] Remove `GTF_VAR_USEDEF`.

Nothing sets this flag.
---
 src/jit/compiler.cpp    |  4 ----
 src/jit/compiler.hpp    |  2 --
 src/jit/copyprop.cpp    |  6 +++---
 src/jit/gentree.cpp     | 10 ++--------
 src/jit/gentree.h       |  3 +--
 src/jit/liveness.cpp    |  2 +-
 src/jit/lsraarm.cpp     |  2 +-
 src/jit/lsraarm64.cpp   |  2 +-
 src/jit/morph.cpp       |  1 -
 src/jit/rationalize.cpp |  7 -------
 src/jit/valuenum.cpp    |  2 +-
 11 files changed, 10 insertions(+), 31 deletions(-)

diff --git a/src/jit/compiler.cpp b/src/jit/compiler.cpp
index f3514a7..c299cfc 100644
--- a/src/jit/compiler.cpp
+++ b/src/jit/compiler.cpp
@@ -9198,10 +9198,6 @@ int cTreeFlagsIR(Compiler* comp, GenTree* tree)
                 {
                     chars += printf("[VAR_USEASG]");
                 }
-                if (tree->gtFlags & GTF_VAR_USEDEF)
-                {
-                    chars += printf("[VAR_USEDEF]");
-                }
                 if (tree->gtFlags & GTF_VAR_CAST)
                 {
                     chars += printf("[VAR_CAST]");
diff --git a/src/jit/compiler.hpp b/src/jit/compiler.hpp
index fd80312..a1d8941 100644
--- a/src/jit/compiler.hpp
+++ b/src/jit/compiler.hpp
@@ -4688,10 +4688,8 @@ unsigned Compiler::GetSsaNumForLocalVarDef(GenTreePtr lcl)
         return SsaConfig::RESERVED_SSA_NUM;
     }
 
-    assert(lcl->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEDEF));
     if (lcl->gtFlags & GTF_VAR_USEASG)
     {
-        assert((lcl->gtFlags & GTF_VAR_USEDEF) == 0);
         // It's an "lcl op= rhs" assignment.  "lcl" is both used and defined here;
         // we've chosen in this case to annotate "lcl" with the SSA number (and VN) of the use,
         // and to store the SSA number of the def in a side table.
diff --git a/src/jit/copyprop.cpp b/src/jit/copyprop.cpp
index b17956d..773976e 100644
--- a/src/jit/copyprop.cpp
+++ b/src/jit/copyprop.cpp
@@ -136,7 +136,7 @@ void Compiler::optCopyProp(BasicBlock* block, GenTreePtr stmt, GenTreePtr tree,
     }
 
     // Propagate only on uses.
-    if (tree->gtFlags & GTF_VAR_DEF || tree->gtFlags & GTF_VAR_USEDEF)
+    if (tree->gtFlags & GTF_VAR_DEF)
     {
         return;
     }
@@ -229,7 +229,7 @@ void Compiler::optCopyProp(BasicBlock* block, GenTreePtr stmt, GenTreePtr tree,
             }
         }
         unsigned newSsaNum = SsaConfig::RESERVED_SSA_NUM;
-        if (op->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEDEF))
+        if (op->gtFlags & GTF_VAR_DEF)
         {
             newSsaNum = GetSsaNumForLocalVarDef(op);
         }
@@ -347,7 +347,7 @@ void Compiler::optBlockCopyProp(BasicBlock* block, LclNumToGenTreePtrStack* curS
             }
             // If we encounter first use of a param or this pointer add it as a live definition.
             // Since they are always live, do it only once.
-            else if ((tree->gtOper == GT_LCL_VAR) && !(tree->gtFlags & (GTF_VAR_USEASG | GTF_VAR_USEDEF)) &&
+            else if ((tree->gtOper == GT_LCL_VAR) && !(tree->gtFlags & GTF_VAR_USEASG) &&
                      (lvaTable[lclNum].lvIsParam || lvaTable[lclNum].lvVerTypeInfo.IsThisPtr()))
             {
                 GenTreePtrStack* stack;
diff --git a/src/jit/gentree.cpp b/src/jit/gentree.cpp
index d78e481..84e07f1 100644
--- a/src/jit/gentree.cpp
+++ b/src/jit/gentree.cpp
@@ -9661,12 +9661,6 @@ void Compiler::gtDispNode(GenTreePtr tree, IndentStack* indentStack, __in __in_z
                     --msgLength;
                     break;
                 }
-                if (tree->gtFlags & GTF_VAR_USEDEF)
-                {
-                    printf("B");
-                    --msgLength;
-                    break;
-                }
                 if (tree->gtFlags & GTF_VAR_DEF)
                 {
                     printf("D");
@@ -12256,9 +12250,9 @@ DONE_FOLD:
     // a use, update the flags appropriately
     if (op->gtOper == GT_LCL_VAR)
     {
-        assert((tree->OperKind() & GTK_ASGOP) || (op->gtFlags & (GTF_VAR_USEASG | GTF_VAR_USEDEF | GTF_VAR_DEF)) == 0);
+        assert((tree->OperKind() & GTK_ASGOP) || (op->gtFlags & (GTF_VAR_USEASG | GTF_VAR_DEF)) == 0);
 
-        op->gtFlags &= ~(GTF_VAR_USEASG | GTF_VAR_USEDEF | GTF_VAR_DEF);
+        op->gtFlags &= ~(GTF_VAR_USEASG | GTF_VAR_DEF);
     }
 
     op->gtNext = tree->gtNext;
diff --git a/src/jit/gentree.h b/src/jit/gentree.h
index 46f6682..5618323 100644
--- a/src/jit/gentree.h
+++ b/src/jit/gentree.h
@@ -903,7 +903,6 @@ public:
 // the flags. These are also used by GT_LCL_FLD.
 #define GTF_VAR_DEF         0x80000000 // GT_LCL_VAR -- this is a definition
 #define GTF_VAR_USEASG      0x40000000 // GT_LCL_VAR -- this is a use/def for a x<op>=y
-#define GTF_VAR_USEDEF      0x20000000 // GT_LCL_VAR -- this is a use/def as in x=x+y (only the lhs x is tagged)
 #define GTF_VAR_CAST        0x10000000 // GT_LCL_VAR -- has been explictly cast (variable node may not be type of local)
 #define GTF_VAR_ITERATOR    0x08000000 // GT_LCL_VAR -- this is a iterator reference in the loop condition
 #define GTF_VAR_CLONED      0x01000000 // GT_LCL_VAR -- this node has been cloned or is a clone
@@ -918,7 +917,7 @@ public:
 #define GTF_VAR_ARR_INDEX   0x00000020 // The variable is part of (the index portion of) an array index expression.
                                        // Shares a value with GTF_REVERSE_OPS, which is meaningless for local var.
 
-#define GTF_LIVENESS_MASK (GTF_VAR_DEF | GTF_VAR_USEASG | GTF_VAR_USEDEF | GTF_REG_BIRTH | GTF_VAR_DEATH)
+#define GTF_LIVENESS_MASK (GTF_VAR_DEF | GTF_VAR_USEASG | GTF_REG_BIRTH | GTF_VAR_DEATH)
 
 #define GTF_CALL_UNMANAGED          0x80000000 // GT_CALL -- direct call to unmanaged code
 #define GTF_CALL_INLINE_CANDIDATE   0x40000000 // GT_CALL -- this call has been marked as an inline candidate
diff --git a/src/jit/liveness.cpp b/src/jit/liveness.cpp
index 9c0cd94..8615703 100644
--- a/src/jit/liveness.cpp
+++ b/src/jit/liveness.cpp
@@ -41,7 +41,7 @@ void Compiler::fgMarkUseDef(GenTreeLclVarCommon* tree)
     }
 
     const bool isDef = (tree->gtFlags & GTF_VAR_DEF) != 0;
-    const bool isUse = !isDef || ((tree->gtFlags & (GTF_VAR_USEASG | GTF_VAR_USEDEF)) != 0);
+    const bool isUse = !isDef || ((tree->gtFlags & GTF_VAR_USEASG) != 0);
 
     if (varDsc->lvTracked)
     {
diff --git a/src/jit/lsraarm.cpp b/src/jit/lsraarm.cpp
index 1f6c84c..416a38b 100644
--- a/src/jit/lsraarm.cpp
+++ b/src/jit/lsraarm.cpp
@@ -722,7 +722,7 @@ void Lowering::TreeNodeInfoInit(GenTree* tree)
             // node, and use an internal register for the address.
 
             info->dstCount = 1;
-            assert((tree->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEASG | GTF_VAR_USEDEF)) == 0);
+            assert((tree->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEASG)) == 0);
             info->internalIntCount = 1;
             break;
 
diff --git a/src/jit/lsraarm64.cpp b/src/jit/lsraarm64.cpp
index 452b9f3..8176a29 100644
--- a/src/jit/lsraarm64.cpp
+++ b/src/jit/lsraarm64.cpp
@@ -679,7 +679,7 @@ void Lowering::TreeNodeInfoInit(GenTree* tree)
             // node, and use an internal register for the address.
 
             info->dstCount = 1;
-            assert((tree->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEASG | GTF_VAR_USEDEF)) == 0);
+            assert((tree->gtFlags & (GTF_VAR_DEF | GTF_VAR_USEASG)) == 0);
             info->internalIntCount = 1;
             break;
     } // end switch (tree->OperGet())
diff --git a/src/jit/morph.cpp b/src/jit/morph.cpp
index 27da028..e19f016 100644
--- a/src/jit/morph.cpp
+++ b/src/jit/morph.cpp
@@ -14148,7 +14148,6 @@ GenTree* Compiler::fgMorphSmpOpOptional(GenTreeOp* tree)
                         /* The target is used as well as being defined */
                         if (op1->OperIsLocal())
                         {
-                            op1->gtFlags &= ~GTF_VAR_USEDEF;
                             op1->gtFlags |= GTF_VAR_USEASG;
                         }
 
diff --git a/src/jit/rationalize.cpp b/src/jit/rationalize.cpp
index 7d39af9..875d9ec 100644
--- a/src/jit/rationalize.cpp
+++ b/src/jit/rationalize.cpp
@@ -993,9 +993,6 @@ void Rationalizer::DoPhase()
         // This needs to be done before the transition to LIR because it relies on the use
         // of fgMorphArgs, which is designed to operate on HIR. Once this is done for a
         // particular statement, link that statement's nodes into the current basic block.
-        //
-        // This visit also clears the GTF_VAR_USEDEF bit on locals, which is not necessary
-        // in the backend.
         fgWalkResult PreOrderVisit(GenTree** use, GenTree* user)
         {
             GenTree* const node = *use;
@@ -1004,10 +1001,6 @@ void Rationalizer::DoPhase()
             {
                 m_rationalizer.RewriteIntrinsicAsUserCall(use, this->m_ancestors);
             }
-            else if (node->OperIsLocal())
-            {
-                node->gtFlags &= ~GTF_VAR_USEDEF;
-            }
 
             return Compiler::WALK_CONTINUE;
         }
diff --git a/src/jit/valuenum.cpp b/src/jit/valuenum.cpp
index b1205ca..0206173 100644
--- a/src/jit/valuenum.cpp
+++ b/src/jit/valuenum.cpp
@@ -5701,7 +5701,7 @@ void Compiler::fgValueNumberTree(GenTreePtr tree, bool evalAsgLhsInd)
                 // TODO-Review: For the short term, we have a workaround for copyblk/initblk.  Those that use
                 // addrSpillTemp will have a statement like "addrSpillTemp = addr(local)."  If we previously decided
                 // that this block operation defines the local, we will have labeled the "local" node as a DEF
-                // (or USEDEF).  This flag propogates to the "local" on the RHS.  So we'll assume that this is correct,
+                // This flag propogates to the "local" on the RHS.  So we'll assume that this is correct,
                 // and treat it as a def (to a new, unique VN).
                 else if ((lcl->gtFlags & GTF_VAR_DEF) != 0)
                 {
-- 
2.7.4

