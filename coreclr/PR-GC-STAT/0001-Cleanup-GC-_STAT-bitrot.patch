From 4e900486d3ae9fc5eef3c374a8cad5c95ef6defe Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Tue, 11 Jul 2017 15:07:03 +0000
Subject: [PATCH] Cleanup GC *_STAT bitrot

---
 src/gc/gc.cpp   | 118 +++++++++++++++++++++++++++++++++++---------------------
 src/gc/gcpriv.h |  45 +++++++--------------
 2 files changed, 87 insertions(+), 76 deletions(-)

diff --git a/src/gc/gc.cpp b/src/gc/gc.cpp
index 9bc1ada..6144077 100644
--- a/src/gc/gc.cpp
+++ b/src/gc/gc.cpp
@@ -510,6 +510,7 @@ static const unsigned int   log_interval = 5000;
 // Time (in ms) when we start a new log interval.
 static unsigned int         log_start_tick;
 static unsigned int         gc_lock_contended;
+static int64_t              log_start_hires;
 // Cycles accumulated in SuspendEE during log_interval.
 static uint64_t             suspend_ee_during_log;
 // Cycles accumulated in RestartEE during log_interval.
@@ -531,6 +532,7 @@ init_sync_log_stats()
         gc_lock_contended = 0;
 
         log_start_tick = GCToOSInterface::GetLowPrecisionTimeStamp();
+        log_start_hires = GCToOSInterface::QueryPerformanceCounter();
     }
     gc_count_during_log++;
 #endif //SYNCHRONIZATION_STATS
@@ -545,16 +547,18 @@ process_sync_log_stats()
 
     if (log_elapsed > log_interval)
     {
+        uint64_t total = GCToOSInterface::QueryPerformanceCounter() - log_start_hires;
         // Print out the cycles we spent on average in each suspend and restart.
         printf("\n_________________________________________________________________________________\n"
             "Past %d(s): #%3d GCs; Total gc_lock contended: %8u; GC: %12u\n"
-            "SuspendEE: %8u; RestartEE: %8u\n",
+            "SuspendEE: %8u; RestartEE: %8u GC%% %g\n",
             log_interval / 1000,
             gc_count_during_log,
             gc_lock_contended,
             (unsigned int)(gc_during_log / gc_count_during_log),
             (unsigned int)(suspend_ee_during_log / gc_count_during_log),
-            (unsigned int)(restart_ee_during_log / gc_count_during_log));
+            (unsigned int)(restart_ee_during_log / gc_count_during_log),
+            (double)(100.0f * gc_during_log / total));
         gc_heap::print_sync_stats(gc_count_during_log);
 
         gc_count_during_log = 0;
@@ -667,13 +671,13 @@ class t_join
     gc_join_flavor flavor;
 
 #ifdef JOIN_STATS
-    unsigned int start[MAX_SUPPORTED_CPUS], end[MAX_SUPPORTED_CPUS], start_seq;
+    uint64_t start[MAX_SUPPORTED_CPUS], end[MAX_SUPPORTED_CPUS], start_seq;
     // remember join id and last thread to arrive so restart can use these
     int thd;
     // we want to print statistics every 10 seconds - this is to remember the start of the 10 sec interval
     uint32_t start_tick;
     // counters for joins, in 1000's of clock cycles
-    unsigned int elapsed_total[gc_join_max], seq_loss_total[gc_join_max], par_loss_total[gc_join_max], in_join_total[gc_join_max];
+    uint64_t elapsed_total[gc_join_max], wake_total[gc_join_max], seq_loss_total[gc_join_max], par_loss_total[gc_join_max], in_join_total[gc_join_max];
 #endif //JOIN_STATS
 
 public:
@@ -732,7 +736,7 @@ public:
     {
 #ifdef JOIN_STATS
         // parallel execution ends here
-        end[gch->heap_number] = GetCycleCount32();
+        end[gch->heap_number] = getTS();
 #endif //JOIN_STATS
 
         assert (!join_struct.joined_p);
@@ -799,8 +803,8 @@ respin:
 
 #ifdef JOIN_STATS
             // parallel execution starts here
-            start[gch->heap_number] = GetCycleCount32();
-            Interlocked::ExchangeAdd(&in_join_total[join_id], (start[gch->heap_number] - end[gch->heap_number])/1000);
+            start[gch->heap_number] = getTS();
+            Interlocked::ExchangeAdd(&in_join_total[join_id], (start[gch->heap_number] - end[gch->heap_number]));
 #endif //JOIN_STATS
         }
         else
@@ -816,8 +820,8 @@ respin:
             // remember the join id, the last thread arriving, the start of the sequential phase,
             // and keep track of the cycles spent waiting in the join
             thd = gch->heap_number;
-            start_seq = GetCycleCount32();
-            Interlocked::ExchangeAdd(&in_join_total[join_id], (start_seq - end[gch->heap_number])/1000);
+            start_seq = getTS();
+            Interlocked::ExchangeAdd(&in_join_total[join_id], (start_seq - end[gch->heap_number]));
 #endif //JOIN_STATS
         }
     }
@@ -828,10 +832,6 @@ respin:
     // need to call it twice in row - you should just merge the work.
     BOOL r_join (gc_heap* gch, int join_id)
     {
-#ifdef JOIN_STATS
-        // parallel execution ends here
-        end[gch->heap_number] = GetCycleCount32();
-#endif //JOIN_STATS
 
         if (join_struct.n_threads == 1)
         {
@@ -882,12 +882,6 @@ respin:
                 }
 
                 fire_event (gch->heap_number, time_end, type_join, join_id);
-
-#ifdef JOIN_STATS
-                // parallel execution starts here
-                start[gch->heap_number] = GetCycleCount32();
-                Interlocked::ExchangeAdd(&in_join_total[join_id], (start[gch->heap_number] - end[gch->heap_number])/1000);
-#endif //JOIN_STATS
             }
 
             return FALSE;
@@ -899,39 +893,69 @@ respin:
         }
     }
 
+#ifdef JOIN_STATS
+    uint64_t getTS()
+    {
+        return GCToOSInterface::QueryPerformanceCounter();
+    }
+
+    void startTS (gc_heap* gch)
+    {
+        // parallel execution ends here
+        start[gch->heap_number] = getTS();
+    }
+#endif //JOIN_STATS
+
     void restart()
     {
 #ifdef JOIN_STATS
-        unsigned int elapsed_seq = GetCycleCount32() - start_seq;
-        unsigned int max = 0, sum = 0;
+        uint64_t elapsed_seq = getTS() - start_seq;
+        uint64_t max = 0, sum = 0, wake = 0;
+        uint64_t minTS = start[0];
+        for (int i = 1; i < join_struct.n_threads; i++)
+        {
+            if(minTS > start[i]) minTS = start[i];
+        }
+
         for (int i = 0; i < join_struct.n_threads; i++)
         {
-            unsigned int elapsed = end[i] - start[i];
+            uint64_t wake_delay = start[i] - minTS;
+            uint64_t elapsed = end[i] - start[i];
             if (max < elapsed)
                 max = elapsed;
             sum += elapsed;
+            wake += wake_delay;
         }
-        unsigned int seq_loss = (join_struct.n_threads - 1)*elapsed_seq;
-        unsigned int par_loss = join_struct.n_threads*max - sum;
+        uint64_t seq_loss = (join_struct.n_threads - 1)*elapsed_seq;
+        uint64_t par_loss = join_struct.n_threads*max - sum;
         double efficiency = 0.0;
         if (max > 0)
             efficiency = sum*100.0/(join_struct.n_threads*max);
 
+        const double tsScale = 1e-6;
+
         // enable this printf to get statistics on each individual join as it occurs
-//      printf("join #%3d  seq_loss = %5d   par_loss = %5d  efficiency = %3.0f%%\n", join_id, seq_loss/1000, par_loss/1000, efficiency);
+//      printf("join #%3d  seq_loss = %5g   par_loss = %5g  efficiency = %3.0f%%\n", join_id, tsScale*seq_loss, tsScale*par_loss, efficiency);
 
-        elapsed_total[join_id] += sum/1000;
-        seq_loss_total[join_id] += seq_loss/1000;
-        par_loss_total[join_id] += par_loss/1000;
+        Interlocked::ExchangeAdd(&elapsed_total[id], sum);
+        Interlocked::ExchangeAdd(&wake_total[id], wake);
+        Interlocked::ExchangeAdd(&seq_loss_total[id], seq_loss);
+        Interlocked::ExchangeAdd(&par_loss_total[id], par_loss);
 
-        // every 10 seconds, print a summary of the time spent in each type of join, in 1000's of clock cycles
+        // every 10 seconds, print a summary of the time spent in each type of join
         if (GCToOSInterface::GetLowPrecisionTimeStamp() - start_tick > 10*1000)
         {
             printf("**** summary *****\n");
             for (int i = 0; i < 16; i++)
             {
-                printf("join #%3d  seq_loss = %8u  par_loss = %8u  in_join_total = %8u\n", i, seq_loss_total[i], par_loss_total[i], in_join_total[i]);
-                elapsed_total[i] = seq_loss_total[i] = par_loss_total[i] = in_join_total[i] = 0;
+                printf("join #%3d  elapsed_total = %8g wake_loss = %8g seq_loss = %8g  par_loss = %8g  in_join_total = %8g\n", 
+                   i,
+                   tsScale*elapsed_total[i],
+                   tsScale*wake_total[i],
+                   tsScale*seq_loss_total[i],
+                   tsScale*par_loss_total[i],
+                   tsScale*in_join_total[i]);
+                elapsed_total[i] = wake_total[i] = seq_loss_total[i] = par_loss_total[i] = in_join_total[i] = 0;
             }
             start_tick = GCToOSInterface::GetLowPrecisionTimeStamp();
         }
@@ -952,7 +976,7 @@ respin:
         fire_event (join_heap_restart, time_end, type_restart, -1);
 
 #ifdef JOIN_STATS
-        start[thd] = GetCycleCount32();
+        start[thd] = getTS();
 #endif //JOIN_STATS
     }
     
@@ -1398,7 +1422,8 @@ BOOL recursive_gc_sync::allow_foreground()
 #endif //BACKGROUND_GC
 #endif //DACCESS_COMPILE
 
-#if  defined(COUNT_CYCLES) || defined(JOIN_STATS) || defined(SYNCHRONIZATION_STATS)
+
+#if  defined(COUNT_CYCLES)
 #ifdef _MSC_VER
 #pragma warning(disable:4035)
 #endif //_MSC_VER
@@ -1414,7 +1439,7 @@ __asm   pop     EDX
 
 #pragma warning(default:4035)
 
-#endif //COUNT_CYCLES || JOIN_STATS || SYNCHRONIZATION_STATS
+#endif //COUNT_CYCLES
 
 #ifdef TIME_GC
 int mark_time, plan_time, sweep_time, reloc_time, compact_time;
@@ -1657,12 +1682,12 @@ static void leave_spin_lock(GCSpinLock *pSpinLock)
 //the gc thread call WaitLonger.
 void WaitLonger (int i
 #ifdef SYNCHRONIZATION_STATS
-    , VOLATILE(GCSpinLock)* spin_lock
+    , GCSpinLock* spin_lock
 #endif //SYNCHRONIZATION_STATS
     )
 {
 #ifdef SYNCHRONIZATION_STATS
-    (spin_lock->num_wait_longer)++;
+    Interlocked::Increment(&spin_lock->num_wait_longer);
 #endif //SYNCHRONIZATION_STATS
 
     // every 8th attempt:
@@ -1685,7 +1710,7 @@ void WaitLonger (int i
     if (!gc_heap::gc_started)
     {
 #ifdef SYNCHRONIZATION_STATS
-        (spin_lock->num_switch_thread_w)++;
+        Interlocked::Increment(&spin_lock->num_switch_thread_w);
 #endif //SYNCHRONIZATION_STATS
         if  (g_num_processors > 1)
         {
@@ -1713,7 +1738,7 @@ void WaitLonger (int i
             }
 
 #ifdef SYNCHRONIZATION_STATS
-            (spin_lock->num_disable_preemptive_w)++;
+            Interlocked::Increment(&spin_lock->num_disable_preemptive_w);
 #endif //SYNCHRONIZATION_STATS
             GCToEEInterface::DisablePreemptiveGC(pCurThread);
         }
@@ -1748,7 +1773,7 @@ retry:
                     if  (spin_lock->lock >= 0 && !gc_heap::gc_started)
                     {
 #ifdef SYNCHRONIZATION_STATS
-                        (spin_lock->num_switch_thread)++;
+                        Interlocked::Increment(&spin_lock->num_switch_thread);
 #endif //SYNCHRONIZATION_STATS
                         Thread* current_thread = GCToEEInterface::GetThread();
                         BOOL cooperative_mode = gc_heap::enable_preemptive (current_thread);
@@ -13096,22 +13121,22 @@ int gc_heap::try_allocate_more_space (alloc_context* acontext, size_t size,
     }
 
 #ifdef SYNCHRONIZATION_STATS
-    unsigned int msl_acquire_start = GetCycleCount32();
+    int64_t msl_acquire_start = GCToOSInterface::QueryPerformanceCounter();
 #endif //SYNCHRONIZATION_STATS
     enter_spin_lock (&more_space_lock);
     add_saved_spinlock_info (me_acquire, mt_try_alloc);
     dprintf (SPINLOCK_LOG, ("[%d]Emsl for alloc", heap_number));
 #ifdef SYNCHRONIZATION_STATS
-    unsigned int msl_acquire = GetCycleCount32() - msl_acquire_start;
+    int64_t msl_acquire = GCToOSInterface::QueryPerformanceCounter() - msl_acquire_start;
     total_msl_acquire += msl_acquire;
     num_msl_acquired++;
     if (msl_acquire > 200)
     {
-        num_high_msl_acquire++;
+        Interlocked::Increment(&num_high_msl_acquire);
     }
     else
     {
-        num_low_msl_acquire++;
+        Interlocked::Increment(&num_low_msl_acquire);
     }
 #endif //SYNCHRONIZATION_STATS
 
@@ -13160,7 +13185,7 @@ int gc_heap::try_allocate_more_space (alloc_context* acontext, size_t size,
 #endif //BACKGROUND_GC
 
 #ifdef SYNCHRONIZATION_STATS
-        bad_suspension++;
+        Interlocked::Increment(&bad_suspension);
 #endif //SYNCHRONIZATION_STATS
         dprintf (/*100*/ 2, ("running out of budget on gen%d, gc", gen_number));
 
@@ -16522,6 +16547,9 @@ int gc_heap::garbage_collect (int n)
 
     fix_allocation_contexts (TRUE);
 #ifdef MULTIPLE_HEAPS
+#ifdef JOIN_STATS
+    gc_t_join.startTS(this);
+#endif //JOIN_STATS
     clear_gen0_bricks();
 #endif //MULTIPLE_HEAPS
 
@@ -34934,7 +34962,7 @@ GCHeap::GarbageCollectGeneration (unsigned int gen, gc_reason reason)
         if (localCount != col_count)
         {
 #ifdef SYNCHRONIZATION_STATS
-            gc_lock_contended++;
+            Interlocked::Increment(&gc_lock_contended);
 #endif //SYNCHRONIZATION_STATS
             dprintf (SPINLOCK_LOG, ("no need GC Lgc"));
             leave_spin_lock (&gc_heap::gc_lock);
diff --git a/src/gc/gcpriv.h b/src/gc/gcpriv.h
index 00092b1..88a5946 100644
--- a/src/gc/gcpriv.h
+++ b/src/gc/gcpriv.h
@@ -282,24 +282,13 @@ void GCLog (const char *fmt, ... );
 #define ASSERT _ASSERTE
 #endif // FEATURE_REDHAWK
 
-#ifdef _DEBUG
-
 struct GCDebugSpinLock {
     VOLATILE(int32_t) lock;                   // -1 if free, 0 if held
+#ifdef _DEBUG
     VOLATILE(Thread *) holding_thread;     // -1 if no thread holds the lock.
     VOLATILE(BOOL) released_by_gc_p;       // a GC thread released the lock.
-
-    GCDebugSpinLock()
-        : lock(-1), holding_thread((Thread*) -1)
-    {
-    }
-};
-typedef GCDebugSpinLock GCSpinLock;
-
-#elif defined (SYNCHRONIZATION_STATS)
-
-struct GCSpinLockInstru {
-    VOLATILE(int32_t) lock;
+#endif
+#if defined (SYNCHRONIZATION_STATS)
     // number of times we went into SwitchToThread in enter_spin_lock.
     unsigned int num_switch_thread;
     // number of times we went into WaitLonger.
@@ -308,12 +297,20 @@ struct GCSpinLockInstru {
     unsigned int num_switch_thread_w;
     // number of times we went to calling DisablePreemptiveGC in WaitLonger.
     unsigned int num_disable_preemptive_w;
+#endif
 
-    GCSpinLockInstru()
-        : lock(-1), num_switch_thread(0), num_wait_longer(0), num_switch_thread_w(0), num_disable_preemptive_w(0)
+    GCDebugSpinLock()
+        : lock(-1)
+#ifdef _DEBUG
+        , holding_thread((Thread*) -1)
+#endif
+#if defined (SYNCHRONIZATION_STATS)
+        , num_switch_thread(0), num_wait_longer(0), num_switch_thread_w(0), num_disable_preemptive_w(0)
+#endif
     {
     }
 
+#if defined (SYNCHRONIZATION_STATS)
     void init()
     {
         num_switch_thread = 0;
@@ -321,24 +318,10 @@ struct GCSpinLockInstru {
         num_switch_thread_w = 0;
         num_disable_preemptive_w = 0;
     }
-};
-
-typedef GCSpinLockInstru GCSpinLock;
-
-#else
-
-struct GCDebugSpinLock {
-    VOLATILE(int32_t) lock;                   // -1 if free, 0 if held
-
-    GCDebugSpinLock()
-        : lock(-1)
-    {
-    }
+#endif
 };
 typedef GCDebugSpinLock GCSpinLock;
 
-#endif
-
 class mark;
 class heap_segment;
 class CObjectHeader;
-- 
2.7.4

