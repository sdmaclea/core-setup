From 727d2c11edf88dcbabee513fa51118fd241a943f Mon Sep 17 00:00:00 2001
From: Eugene Rozenfeld <erozen@microsoft.com>
Date: Wed, 7 Mar 2018 14:16:49 -0800
Subject: [PATCH] Remove dead code found by ILLink. (#16759)

I'm preparing changes to enable running ILLink on SPC
(similarly to what we do on corefx assemblies).
There will be a separate PR for those changes.

This PR just removes the dead code flagged by ILLink from the sources.
---
 .../shared/System/Diagnostics/Tracing/ActivityTracker.cs |  5 -----
 src/mscorlib/shared/System/Globalization/DaylightTime.cs |  4 ----
 src/mscorlib/shared/System/IO/Path.cs                    | 16 ----------------
 src/mscorlib/shared/System/IO/PathInternal.Windows.cs    | 13 -------------
 src/mscorlib/shared/System/Number.Parsing.cs             |  3 ---
 .../Diagnostics/Eventing/EventPipeEventProvider.cs       | 12 ------------
 src/mscorlib/src/System/Reflection/AssemblyName.cs       |  3 ---
 .../src/System/Reflection/Emit/AssemblyBuilder.cs        | 12 ------------
 .../src/System/Reflection/Emit/ConstructorBuilder.cs     |  4 ----
 src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs |  7 -------
 src/mscorlib/src/System/Reflection/Emit/EnumBuilder.cs   |  5 -----
 src/mscorlib/src/System/Reflection/Emit/EventBuilder.cs  |  3 ---
 src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs   | 16 ----------------
 src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs  |  1 -
 src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs |  1 -
 .../src/System/Reflection/Emit/ParameterBuilder.cs       |  6 ------
 .../src/System/Reflection/Emit/PropertyBuilder.cs        |  3 ---
 src/mscorlib/src/System/Reflection/RtFieldInfo.cs        |  2 --
 .../System/Runtime/InteropServices/ComEventsMethod.cs    |  4 ----
 .../src/System/Runtime/InteropServices/CriticalHandle.cs |  3 ---
 src/mscorlib/src/System/Threading/CancellationToken.cs   |  3 ---
 src/mscorlib/src/System/Threading/Tasks/Task.cs          |  5 -----
 src/vm/ecalllist.h                                       |  1 -
 23 files changed, 132 deletions(-)

diff --git a/src/mscorlib/shared/System/Diagnostics/Tracing/ActivityTracker.cs b/src/mscorlib/shared/System/Diagnostics/Tracing/ActivityTracker.cs
index 9ac32c3..d9f9f08 100644
--- a/src/mscorlib/shared/System/Diagnostics/Tracing/ActivityTracker.cs
+++ b/src/mscorlib/shared/System/Diagnostics/Tracing/ActivityTracker.cs
@@ -248,11 +248,6 @@ namespace System.Diagnostics.Tracing
         #region private
 
         /// <summary>
-        /// The current activity ID.  Use this to log normal events.  
-        /// </summary>
-        private Guid CurrentActivityId { get { return m_current.Value.ActivityId; } }
-
-        /// <summary>
         /// Searched for a active (nonstopped) activity with the given name.  Returns null if not found.  
         /// </summary>
         private ActivityInfo FindActiveActivity(string name, ActivityInfo startLocation)
diff --git a/src/mscorlib/shared/System/Globalization/DaylightTime.cs b/src/mscorlib/shared/System/Globalization/DaylightTime.cs
index e6920b3..72a572c 100644
--- a/src/mscorlib/shared/System/Globalization/DaylightTime.cs
+++ b/src/mscorlib/shared/System/Globalization/DaylightTime.cs
@@ -11,10 +11,6 @@ namespace System.Globalization
         private readonly DateTime _end;
         private readonly TimeSpan _delta;
 
-        private DaylightTime()
-        {
-        }
-
         public DaylightTime(DateTime start, DateTime end, TimeSpan delta)
         {
             _start = start;
diff --git a/src/mscorlib/shared/System/IO/Path.cs b/src/mscorlib/shared/System/IO/Path.cs
index fe6234c..9033350 100644
--- a/src/mscorlib/shared/System/IO/Path.cs
+++ b/src/mscorlib/shared/System/IO/Path.cs
@@ -477,22 +477,6 @@ namespace System.IO
             return true;
         }
 
-        private static string CombineInternal(ReadOnlySpan<char> first, ReadOnlySpan<char> second)
-        {
-            if (first.Length == 0)
-                return second.Length == 0
-                    ? string.Empty
-                    : new string(second);
-
-            if (second.Length == 0)
-                return new string(first);
-
-            if (IsPathRooted(second))
-                return new string(second);
-
-            return JoinInternal(first, second);
-        }
-
         private static string CombineInternal(string first, string second)
         {
             if (string.IsNullOrEmpty(first))
diff --git a/src/mscorlib/shared/System/IO/PathInternal.Windows.cs b/src/mscorlib/shared/System/IO/PathInternal.Windows.cs
index 81d51ba..5b1a133 100644
--- a/src/mscorlib/shared/System/IO/PathInternal.Windows.cs
+++ b/src/mscorlib/shared/System/IO/PathInternal.Windows.cs
@@ -270,19 +270,6 @@ namespace System.IO
             return i;
         }
 
-        private static bool StartsWithOrdinal(ReadOnlySpan<char> source, string value)
-        {
-            if (source.Length < value.Length)
-                return false;
-
-            for (int i = 0; i < value.Length; i++)
-            {
-                if (value[i] != source[i])
-                    return false;
-            }
-            return true;
-        }
-
         /// <summary>
         /// Returns true if the path specified is relative to the current drive or working directory.
         /// Returns false if the path is fixed to a specific drive or UNC path.  This method does no
diff --git a/src/mscorlib/shared/System/Number.Parsing.cs b/src/mscorlib/shared/System/Number.Parsing.cs
index c6ae34d..70fc9ae 100644
--- a/src/mscorlib/shared/System/Number.Parsing.cs
+++ b/src/mscorlib/shared/System/Number.Parsing.cs
@@ -956,9 +956,6 @@ namespace System
 
             public static unsafe ulong Mantissa(double d) =>
                 *((ulong*)&d) & 0x000fffffffffffff;
-
-            public static unsafe bool Sign(double d) =>
-                (*((uint*)&d + 1) >> 31) != 0;
         }
     }
 }
diff --git a/src/mscorlib/src/System/Diagnostics/Eventing/EventPipeEventProvider.cs b/src/mscorlib/src/System/Diagnostics/Eventing/EventPipeEventProvider.cs
index 0d99ff4..663a876 100644
--- a/src/mscorlib/src/System/Diagnostics/Eventing/EventPipeEventProvider.cs
+++ b/src/mscorlib/src/System/Diagnostics/Eventing/EventPipeEventProvider.cs
@@ -83,17 +83,5 @@ namespace System.Diagnostics.Tracing
             IntPtr eventHandlePtr = EventPipeInternal.DefineEvent(m_provHandle, eventID, keywords, eventVersion, level, pMetadata, metadataLength);
             return eventHandlePtr;
         }
-
-        // Copy src to buffer and modify the offset.
-        // Note: We know the buffer size ahead of time to make sure no buffer overflow.
-        private static unsafe void WriteToBuffer(byte *buffer, uint bufferLength, ref uint offset, byte *src, uint srcLength)
-        {
-            Debug.Assert(bufferLength >= (offset + srcLength));
-            for (int i = 0; i < srcLength; i++)
-            {
-                *(byte *)(buffer + offset + i) = *(byte *)(src + i);
-            }
-            offset += srcLength;
-        }
     }
 }
diff --git a/src/mscorlib/src/System/Reflection/AssemblyName.cs b/src/mscorlib/src/System/Reflection/AssemblyName.cs
index 865a6cf..ecd8d43 100644
--- a/src/mscorlib/src/System/Reflection/AssemblyName.cs
+++ b/src/mscorlib/src/System/Reflection/AssemblyName.cs
@@ -432,9 +432,6 @@ namespace System.Reflection
         static internal extern AssemblyName nGetFileInformation(String s);
 
         [MethodImplAttribute(MethodImplOptions.InternalCall)]
-        private extern String nToString();
-
-        [MethodImplAttribute(MethodImplOptions.InternalCall)]
         private extern byte[] nGetPublicKeyToken();
 
         static internal String EscapeCodeBase(String codebase)
diff --git a/src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
index b483738..2c446f7 100644
--- a/src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
@@ -745,17 +745,5 @@ namespace System.Reflection.Emit
                 m_assemblyData.AddCustomAttribute(customBuilder);
             }
         }
-
-        /**********************************************
-         * 
-         * Private methods
-         * 
-         **********************************************/
-
-        /**********************************************
-         * Make a private constructor so these cannot be constructed externally.
-         * @internonly
-         **********************************************/
-        private AssemblyBuilder() { }
     }
 }
diff --git a/src/mscorlib/src/System/Reflection/Emit/ConstructorBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/ConstructorBuilder.cs
index 47b6f08..b333dc3 100644
--- a/src/mscorlib/src/System/Reflection/Emit/ConstructorBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/ConstructorBuilder.cs
@@ -21,10 +21,6 @@ namespace System.Reflection.Emit
 
         #region Constructor
 
-        private ConstructorBuilder()
-        {
-        }
-
         internal ConstructorBuilder(String name, MethodAttributes attributes, CallingConventions callingConvention,
             Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers, ModuleBuilder mod, TypeBuilder type)
         {
diff --git a/src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs b/src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
index 3cd4851..8588a7e 100644
--- a/src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
@@ -55,8 +55,6 @@ namespace System.Reflection.Emit
         // class initialization (ctor and init)
         //
 
-        private DynamicMethod() { }
-
         public DynamicMethod(string name,
                              Type returnType,
                              Type[] parameterTypes)
@@ -583,11 +581,6 @@ namespace System.Reflection.Emit
             private MethodAttributes m_attributes;
             private CallingConventions m_callingConvention;
 
-            //
-            // ctors
-            //
-            private RTDynamicMethod() { }
-
             internal RTDynamicMethod(DynamicMethod owner, String name, MethodAttributes attributes, CallingConventions callingConvention)
             {
                 m_owner = owner;
diff --git a/src/mscorlib/src/System/Reflection/Emit/EnumBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/EnumBuilder.cs
index 28c7074..38aaab2 100644
--- a/src/mscorlib/src/System/Reflection/Emit/EnumBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/EnumBuilder.cs
@@ -353,11 +353,6 @@ namespace System.Reflection.Emit
          * 
          */
 
-        //*******************************
-        // Make a private constructor so these cannot be constructed externally.
-        //*******************************
-        private EnumBuilder() { }
-
         public override Type MakePointerType()
         {
             return SymbolType.FormCompoundType("*", this, 0);
diff --git a/src/mscorlib/src/System/Reflection/Emit/EventBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/EventBuilder.cs
index ff15128..c67d555 100644
--- a/src/mscorlib/src/System/Reflection/Emit/EventBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/EventBuilder.cs
@@ -25,9 +25,6 @@ namespace System.Reflection.Emit
     // 
     public sealed class EventBuilder
     {
-        // Make a private constructor so these cannot be constructed externally.
-        private EventBuilder() { }
-
         // Constructs a EventBuilder.  
         //
         internal EventBuilder(
diff --git a/src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs b/src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
index 14f3a38..d376e64 100644
--- a/src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
@@ -1403,22 +1403,6 @@ namespace System.Reflection.Emit
 
         private int m_currentState;
 
-
-        //This will never get called.  The values exist merely to keep the
-        //compiler happy.
-        private __ExceptionInfo()
-        {
-            m_startAddr = 0;
-            m_filterAddr = null;
-            m_catchAddr = null;
-            m_catchEndAddr = null;
-            m_endAddr = 0;
-            m_currentCatch = 0;
-            m_type = null;
-            m_endFinally = -1;
-            m_currentState = State_Try;
-        }
-
         internal __ExceptionInfo(int startAddr, Label endLabel)
         {
             m_startAddr = startAddr;
diff --git a/src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs
index c04c3c8..1e07f3a 100644
--- a/src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs
@@ -18,7 +18,6 @@ namespace System.Reflection.Emit
         #endregion
 
         #region Constructor
-        private LocalBuilder() { }
         internal LocalBuilder(int localIndex, Type localType, MethodInfo methodBuilder)
             : this(localIndex, localType, methodBuilder, false) { }
         internal LocalBuilder(int localIndex, Type localType, MethodInfo methodBuilder, bool isPinned)
diff --git a/src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
index f6d73d9..70b5b66 100644
--- a/src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
@@ -49,7 +49,6 @@ namespace System.Reflection.Emit
         // Parameters
         private SignatureHelper m_signature;
         internal Type[] m_parameterTypes;
-        private ParameterBuilder m_retParam;
         private Type m_returnType;
         private Type[] m_returnTypeRequiredCustomModifiers;
         private Type[] m_returnTypeOptionalCustomModifiers;
diff --git a/src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
index 6f61cac..a875e3b 100644
--- a/src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
@@ -58,12 +58,6 @@ namespace System.Reflection.Emit
             customBuilder.CreateCustomAttribute((ModuleBuilder)(m_methodBuilder.GetModule()), m_pdToken.Token);
         }
 
-        //*******************************
-        // Make a private constructor so these cannot be constructed externally.
-        //*******************************
-        private ParameterBuilder() { }
-
-
         internal ParameterBuilder(
             MethodBuilder methodBuilder,
             int sequence,
diff --git a/src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs b/src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
index 9344b53..0fbdd83 100644
--- a/src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
+++ b/src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
@@ -26,9 +26,6 @@ namespace System.Reflection.Emit
     // 
     public sealed class PropertyBuilder : PropertyInfo
     {
-        // Make a private constructor so these cannot be constructed externally.
-        private PropertyBuilder() { }
-
         // Constructs a PropertyBuilder.  
         //
         internal PropertyBuilder(
diff --git a/src/mscorlib/src/System/Reflection/RtFieldInfo.cs b/src/mscorlib/src/System/Reflection/RtFieldInfo.cs
index e4b592d..fedffad 100644
--- a/src/mscorlib/src/System/Reflection/RtFieldInfo.cs
+++ b/src/mscorlib/src/System/Reflection/RtFieldInfo.cs
@@ -67,8 +67,6 @@ namespace System.Reflection
         }
         #endregion
 
-        private RuntimeAssembly GetRuntimeAssembly() { return m_declaringType.GetRuntimeAssembly(); }
-
         #region Constructor
         internal RtFieldInfo(
             RuntimeFieldHandleInternal handle, RuntimeType declaringType, RuntimeTypeCache reflectedTypeCache, BindingFlags bindingFlags)
diff --git a/src/mscorlib/src/System/Runtime/InteropServices/ComEventsMethod.cs b/src/mscorlib/src/System/Runtime/InteropServices/ComEventsMethod.cs
index f7e84ca..accb8c8 100644
--- a/src/mscorlib/src/System/Runtime/InteropServices/ComEventsMethod.cs
+++ b/src/mscorlib/src/System/Runtime/InteropServices/ComEventsMethod.cs
@@ -35,10 +35,6 @@ namespace System.Runtime.InteropServices
         {
             private Delegate _d;
 
-            private bool _once = false;
-            private int _expectedParamsCount;
-            private Type[] _cachedTargetTypes;
-
             public DelegateWrapper(Delegate d)
             {
                 _d = d;
diff --git a/src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs b/src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs
index 342c153..da7cb3e 100644
--- a/src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs
+++ b/src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs
@@ -141,9 +141,6 @@ namespace System.Runtime.InteropServices
             _isClosed = false;
         }
 
-        // Adding an empty default constructor for annotation purposes
-        private CriticalHandle() { }
-
         ~CriticalHandle()
         {
             Dispose(false);
diff --git a/src/mscorlib/src/System/Threading/CancellationToken.cs b/src/mscorlib/src/System/Threading/CancellationToken.cs
index 86d5dcd..9766ca2 100644
--- a/src/mscorlib/src/System/Threading/CancellationToken.cs
+++ b/src/mscorlib/src/System/Threading/CancellationToken.cs
@@ -313,8 +313,5 @@ namespace System.Threading
         // Throws an OCE; separated out to enable better inlining of ThrowIfCancellationRequested
         private void ThrowOperationCanceledException() =>
             throw new OperationCanceledException(SR.OperationCanceled, this);
-
-        private static void ThrowObjectDisposedException() =>
-            throw new ObjectDisposedException(null, SR.CancellationToken_SourceDisposed);
     }
 }
diff --git a/src/mscorlib/src/System/Threading/Tasks/Task.cs b/src/mscorlib/src/System/Threading/Tasks/Task.cs
index 4e8de99..8e4115a 100644
--- a/src/mscorlib/src/System/Threading/Tasks/Task.cs
+++ b/src/mscorlib/src/System/Threading/Tasks/Task.cs
@@ -6199,11 +6199,6 @@ namespace System.Threading.Tasks
             s_currentActiveTasks.TryGetValue(taskId, out task);
             return task;
         }
-
-        private static Task[] GetActiveTasks()
-        {
-            return new List<Task>(s_currentActiveTasks.Values).ToArray();
-        }
     }
 
     internal sealed class CompletionActionInvoker : IThreadPoolWorkItem
diff --git a/src/vm/ecalllist.h b/src/vm/ecalllist.h
index 4c69609..05ce0e0 100644
--- a/src/vm/ecalllist.h
+++ b/src/vm/ecalllist.h
@@ -570,7 +570,6 @@ FCFuncEnd()
 
 FCFuncStart(gAssemblyNameFuncs)
     FCFuncElement("nInit", AssemblyNameNative::Init)
-    FCFuncElement("nToString", AssemblyNameNative::ToString)
     FCFuncElement("nGetPublicKeyToken", AssemblyNameNative::GetPublicKeyToken)
     FCFuncElement("nGetFileInformation", AssemblyNameNative::GetFileInformation)
 FCFuncEnd()
-- 
2.7.4

