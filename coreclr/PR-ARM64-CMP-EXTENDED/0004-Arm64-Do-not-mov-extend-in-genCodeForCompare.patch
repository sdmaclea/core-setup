From 49da55ff2b63908cab6624599919919d23473216 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Thu, 14 Sep 2017 19:02:29 -0400
Subject: [PATCH] [Arm64] Do not mov extend in genCodeForCompare

---
 src/jit/codegenarm64.cpp | 46 ++++------------------------------------------
 src/jit/lower.cpp        |  9 ---------
 2 files changed, 4 insertions(+), 51 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index e0dfaa5..14e1318 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -3438,14 +3438,15 @@ void CodeGen::genCodeForCompare(GenTreeOp* tree)
 
     genConsumeOperands(tree);
 
-    emitAttr cmpSize = EA_UNKNOWN;
+    emitAttr cmpSize = EA_ATTR(genTypeSize(op1Type));
+
+    assert(genTypeSize(op1Type) == genTypeSize(op2Type));
 
     if (varTypeIsFloating(op1Type))
     {
         assert(varTypeIsFloating(op2Type));
         assert(!op1->isContained());
         assert(op1Type == op2Type);
-        cmpSize = EA_ATTR(genTypeSize(op1Type));
 
         if (op2->IsIntegralConst(0))
         {
@@ -3463,31 +3464,8 @@ void CodeGen::genCodeForCompare(GenTreeOp* tree)
         // We don't support swapping op1 and op2 to generate cmp reg, imm
         assert(!op1->isContainedIntOrIImmed());
 
-        unsigned op1Size = genTypeSize(op1Type);
-        unsigned op2Size = genTypeSize(op2Type);
-
-        cmpSize = EA_4BYTE;
-        if ((op1Size == EA_8BYTE) || (op2Size == EA_8BYTE))
-        {
-            cmpSize = EA_8BYTE;
-        }
-
         instruction ins = tree->OperIs(GT_TEST_EQ, GT_TEST_NE) ? INS_tst : INS_cmp;
 
-        if (op1Size < cmpSize)
-        {
-            assert(op1Size == 4);
-            bool isTest          = (ins == INS_tst);
-            bool testNeedsExtend = isTest && (!op2->isContainedIntOrIImmed() ||
-                                              (op2->AsIntConCommon()->IconValue() & (~0UL << (8 * op1Size))));
-            if (!isTest || testNeedsExtend)
-            {
-                // We need to sign/zero extend op1 up to 64 bits.
-                instruction ins = ins_Move_Extend(op1Type, true);
-                inst_RV_RV(ins, op1->gtRegNum, op1->gtRegNum);
-            }
-        }
-
         if (op2->isContainedIntOrIImmed())
         {
             GenTreeIntConCommon* intConst = op2->AsIntConCommon();
@@ -3495,23 +3473,7 @@ void CodeGen::genCodeForCompare(GenTreeOp* tree)
         }
         else
         {
-            insOpts extendOpt = INS_OPTS_NONE;
-            if (op2Size < cmpSize)
-            {
-                if (ins == INS_tst)
-                {
-                    // We need to sign/zero extend op1 up to 64 bits.
-                    instruction ins = ins_Move_Extend(op1Type, true);
-                    inst_RV_RV(ins, op1->gtRegNum, op1->gtRegNum);
-                }
-                else
-                {
-                    assert(op2Size == 4);
-                    // Use cmp extended register form to sign/zero extend op2 up to 64 bits
-                    extendOpt = varTypeIsUnsigned(op2Type) ? INS_OPTS_UXTW : INS_OPTS_SXTW;
-                }
-            }
-            emit->emitIns_R_R_I(ins, cmpSize, op1->gtRegNum, op2->gtRegNum, 0, extendOpt);
+            emit->emitIns_R_R(ins, cmpSize, op1->gtRegNum, op2->gtRegNum);
         }
     }
 
diff --git a/src/jit/lower.cpp b/src/jit/lower.cpp
index b0d76fc..e5cd229 100644
--- a/src/jit/lower.cpp
+++ b/src/jit/lower.cpp
@@ -2383,7 +2383,6 @@ void Lowering::LowerCompare(GenTree* cmp)
             {
                 (*smallerOpUse)->gtType = TYP_LONG;
             }
-#ifdef _TARGET_AMD64_
             else
             {
                 GenTree* cast = comp->gtNewCastNode(TYP_LONG, *smallerOpUse, TYP_LONG);
@@ -2391,14 +2390,6 @@ void Lowering::LowerCompare(GenTree* cmp)
                 BlockRange().InsertAfter(cast->gtGetOp1(), cast);
                 ContainCheckCast(cast->AsCast());
             }
-#elif defined(_TARGET_ARM64_)
-            else if (op2Is64Bit && !longOp->IsCnsIntOrI())
-            {
-                // Arm64 can use extended compare if smaller register operand is second
-                cmp->SetOperRaw(GenTree::SwapRelop(cmp->OperGet()));
-                std::swap(cmp->gtOp.gtOp1, cmp->gtOp.gtOp2);
-            }
-#endif // _TARGET_AMD64_
         }
     }
 #endif // _TARGET_64BIT_
-- 
2.7.4

