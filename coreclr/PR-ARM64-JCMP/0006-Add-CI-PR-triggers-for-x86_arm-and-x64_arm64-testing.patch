From 6d7d7dce87afd6343da2de41e36bbd07848ec02e Mon Sep 17 00:00:00 2001
From: Bruce Forstall <brucefo@microsoft.com>
Date: Mon, 25 Sep 2017 17:22:03 -0700
Subject: [PATCH] Add CI PR triggers for x86_arm and x64_arm64 testing (#14158)

* Add CI PR triggers for x86_arm and x64_arm64 testing

* Fix bug

* Don't do GC stress with altjit
---
 netci.groovy               | 145 ++++++++++++++++++++++++++++++++++-----------
 tests/runtest.cmd          |   4 +-
 tests/x64_arm64_altjit.cmd |   6 ++
 tests/x86_arm_altjit.cmd   |   6 ++
 4 files changed, 124 insertions(+), 37 deletions(-)
 create mode 100644 tests/x64_arm64_altjit.cmd
 create mode 100644 tests/x86_arm_altjit.cmd

diff --git a/netci.groovy b/netci.groovy
index 9901534..6a90a31 100755
--- a/netci.groovy
+++ b/netci.groovy
@@ -185,7 +185,7 @@ class Constants {
     def static configurationList = ['Debug', 'Checked', 'Release']
 
     // This is the set of architectures
-    def static architectureList = ['arm', 'armlb', 'arm64', 'x64', 'x86', 'x86lb']
+    def static architectureList = ['arm', 'armlb', 'x86_arm_altjit', 'x64_arm64_altjit', 'arm64', 'x64', 'x86', 'x86lb']
 }
 
 def static setMachineAffinity(def job, def os, def architecture, def options = null) {
@@ -360,6 +360,16 @@ def static genStressModeScriptStep(def os, def stressModeName, def stressModeVar
     return stepScript
 }
 
+// Append an existing script to a stress mode script already created by genStressModeScriptStep().
+// Returns string of commands to do this.
+def static appendStressModeScriptStep(def os, def appendScript, def stepScriptLocation) {
+    assert (os == 'Windows_NT')
+    def stepScript = ''
+    stepScript += "echo Appending ${appendScript} to ${stepScriptLocation}\r\n"
+    stepScript += "type ${appendScript} >> ${stepScriptLocation}\r\n"
+    return stepScript
+}
+
 // Calculates the name of the build job based on some typical parameters.
 //
 def static getJobName(def configuration, def architecture, def os, def scenario, def isBuildOnly) {
@@ -411,6 +421,8 @@ def static getJobName(def configuration, def architecture, def os, def scenario,
             break
         case 'x86':
         case 'x86lb':
+        case 'x86_arm_altjit':
+        case 'x64_arm64_altjit':
             baseName = architecture.toLowerCase() + '_' + configuration.toLowerCase() + '_' + os.toLowerCase()
             break
         default:
@@ -423,6 +435,16 @@ def static getJobName(def configuration, def architecture, def os, def scenario,
 }
 
 def static addNonPRTriggers(def job, def branch, def isPR, def architecture, def os, def configuration, def scenario, def isFlowJob, def isWindowsBuildOnlyJob, def bidailyCrossList) {
+
+    // Only PR triggers for altjit jobs.
+    switch (architecture) {
+        case 'x86_arm_altjit':
+        case 'x64_arm64_altjit':
+            return
+        default:
+            break
+    }
+
     // Check scenario.
     switch (scenario) {
         case 'default':
@@ -1484,6 +1506,21 @@ def static addTriggers(def job, def branch, def isPR, def architecture, def os,
             }
             break
         // editor brace matching: }
+        case 'x64_arm64_altjit':
+        case 'x86_arm_altjit': // editor brace matching: {
+            assert (os == 'Windows_NT')
+            switch (scenario) {
+                case 'default':
+                    Utilities.addGithubPRTriggerForBranch(job, branch, "${os} ${architecture} ${configuration} Build and Test",
+                        "(?i).*test\\W+${os}\\W+${architecture}\\W+${configuration}.*")
+                    break
+                default:
+                    Utilities.addGithubPRTriggerForBranch(job, branch, "${os} ${architecture} ${configuration} ${scenario}",
+                        "(?i).*test\\W+${os}\\W+${architecture}\\W+${configuration}\\W+${scenario}.*")
+                    break
+            }
+            break
+        // editor brace matching: }
         default:
             println("Unknown architecture: ${architecture}");
             assert false
@@ -1503,18 +1540,28 @@ def static calculateBuildCommands(def newJob, def scenario, def branch, def isPR
                 case 'x64':
                 case 'x86':
                 case 'x86lb':
+                case 'x86_arm_altjit':
+                case 'x64_arm64_altjit':
                     def arch = architecture
                     def buildOpts = ''
-                    if (architecture == 'x86lb') {
+                    if ((architecture == 'x86lb') || (architecture == 'x86_arm_altjit')) {
                         arch = 'x86'
                     }
+                    else if (architecture == 'x64_arm64_altjit') {
+                        arch = 'x64'
+                    }
 
                     if (scenario == 'illink') {
                         buildCommands += "tests\\scripts\\build_illink.cmd clone ${arch}"
                     }
 
                     // If it is a release build for windows, ensure PGO is used, else fail the build
-                    if ((lowerConfiguration == 'release') && (scenario in Constants.basicScenarios) && (architecture != 'x86lb')) {
+                    if ((lowerConfiguration == 'release') &&
+                        (scenario in Constants.basicScenarios) &&
+                        (architecture != 'x86lb') &&
+                        (architecture != 'x86_arm_altjit') &&
+                        (architecture != 'x64_arm64_altjit')) {
+
                         buildOpts += ' enforcepgo'
                     }
 
@@ -1555,11 +1602,7 @@ def static calculateBuildCommands(def newJob, def scenario, def branch, def isPR
                         assert false
                     }
 
-                    // If we are running a stress mode, we should write out the set of key
-                    // value env pairs to a file at this point and then we'll pass that to runtest.cmd
-
                     if (!isBuildOnly) {
-                        //If this is a crossgen build, pass 'crossgen' to runtest.cmd
                         def crossgenStr = ''
                         def runcrossgentestsStr = ''
                         def runjitstressStr = ''
@@ -1569,14 +1612,17 @@ def static calculateBuildCommands(def newJob, def scenario, def branch, def isPR
                         def runjitdisasmStr = ''
                         def runilasmroundtripStr = ''
                         def gcstressStr = ''
-                        def runtestArguments = ''
                         def gcTestArguments = ''
                         def illinkArguments = ''
+                        def testEnvStr = ''
+                        def runtestArguments = ''
 
                         if (scenario == 'r2r' ||
                             scenario == 'pri1r2r' ||
                             scenario == 'gcstress15_pri1r2r' ||
                             Constants.r2rJitStressScenarios.indexOf(scenario) != -1) {
+
+                            // If this is a crossgen build, pass 'crossgen' to runtest.cmd
                             crossgenStr = 'crossgen'
                             runcrossgentestsStr = 'runcrossgentests'
 
@@ -1617,41 +1663,60 @@ def static calculateBuildCommands(def newJob, def scenario, def branch, def isPR
                                 runjitforcerelocsStr = 'jitforcerelocs'
                             }
                         }
-                        if (scenario == 'gcstress15_pri1r2r')
-                        {
+                        else if (scenario == 'gcstress15_pri1r2r') {
                             gcstressStr = 'gcstresslevel 0xF'
                         }
-
-                        if (scenario == 'jitdiff')
-                        {
+                        else if (scenario == 'jitdiff') {
                             runjitdisasmStr = 'jitdisasm crossgen'
                         }
-
-                        if (scenario == 'ilrt')
-                        {
+                        else if (scenario == 'ilrt') {
                             runilasmroundtripStr = 'ilasmroundtrip'
                         }
-
-                        if (isLongGc(scenario)) {
+                        else if (isLongGc(scenario)) {
                             gcTestArguments = "${scenario} sequential"
                         }
-
-                        if (scenario == 'illink')
+                        else if (scenario == 'illink')
                         {
                             illinkArguments = "link %WORKSPACE%\\linker\\linker\\bin\\netcore_Release\\netcoreapp2.0\\win10-${arch}\\publish\\illink.exe"
                         }
 
-                        runtestArguments = "${lowerConfiguration} ${arch} ${gcstressStr} ${crossgenStr} ${runcrossgentestsStr} ${runjitstressStr} ${runjitstressregsStr} ${runjitmioptsStr} ${runjitforcerelocsStr} ${runjitdisasmStr} ${runilasmroundtripStr} ${gcTestArguments} ${illinkArguments} collectdumps"
-
+                        def envScriptPath = ''
                         if (Constants.jitStressModeScenarios.containsKey(scenario)) {
-                            def stepScriptLocation = "%WORKSPACE%\\SetStressModes.bat"
-                            buildCommands += genStressModeScriptStep(os, scenario, Constants.jitStressModeScenarios[scenario], stepScriptLocation)
+                            envScriptPath = "%WORKSPACE%\\SetStressModes.bat"
+                            buildCommands += genStressModeScriptStep(os, scenario, Constants.jitStressModeScenarios[scenario], envScriptPath)
+                            if (architecture == 'x86lb') {
+                                buildCommands += appendStressModeScriptStep(os, "%WORKSPACE%\\tests\\legacyjit_x86_testenv.cmd", envScriptPath)
+                            }
+                            else if (architecture == 'x86_arm_altjit') {
+                                buildCommands += appendStressModeScriptStep(os, "%WORKSPACE%\\tests\\x86_arm_altjit.cmd", envScriptPath)
+                            }
+                            else if (architecture == 'x64_arm64_altjit') {
+                                buildCommands += appendStressModeScriptStep(os, "%WORKSPACE%\\tests\\x64_arm64_altjit.cmd", envScriptPath)
+                            }
+                        }
+                        else if (architecture == 'x86lb') {
+                            envScriptPath = "%WORKSPACE%\\tests\\legacyjit_x86_testenv.cmd"
+                        }
+                        else if (architecture == 'x86_arm_altjit') {
+                            envScriptPath = "%WORKSPACE%\\tests\\x86_arm_altjit.cmd"
+                        }
+                        else if (architecture == 'x64_arm64_altjit') {
+                            envScriptPath = "%WORKSPACE%\\tests\\x64_arm64_altjit.cmd"
+                        }
+                        if (envScriptPath != '') {
+                            testEnvStr = "TestEnv ${envScriptPath}"
+                        }
+
+                        runtestArguments = "${lowerConfiguration} ${arch} ${gcstressStr} ${crossgenStr} ${runcrossgentestsStr} ${runjitstressStr} ${runjitstressregsStr} ${runjitmioptsStr} ${runjitforcerelocsStr} ${runjitdisasmStr} ${runilasmroundtripStr} ${gcTestArguments} ${illinkArguments} collectdumps ${testEnvStr}"
 
-                            if (enableCorefxTesting) {
+                        // If we are running a stress mode, we should write out the set of key
+                        // value env pairs to a file at this point and then we'll pass that to runtest.cmd
+
+                        if (Constants.jitStressModeScenarios.containsKey(scenario) && enableCorefxTesting) {
                             def workspaceRelativeFxRoot = "_/fx"
                             def absoluteFxRoot = "%WORKSPACE%\\_\\fx"
 
-                                buildCommands += "python -u %WORKSPACE%\\tests\\scripts\\run-corefx-tests.py -arch ${arch} -build_type ${configuration} -fx_root ${absoluteFxRoot} -fx_branch ${branch} -env_script ${stepScriptLocation}"
+                            buildCommands += "python -u %WORKSPACE%\\tests\\scripts\\run-corefx-tests.py -arch ${arch} -build_type ${configuration} -fx_root ${absoluteFxRoot} -fx_branch ${branch} -env_script ${envScriptPath}"
 
                             setTestJobTimeOut(newJob, scenario)
 
@@ -1663,20 +1728,13 @@ def static calculateBuildCommands(def newJob, def scenario, def branch, def isPR
                             Utilities.addArchival(newJob, "SetStressModes.bat", "", true, false)
                             Utilities.addArchival(newJob, "${workspaceRelativeFxRoot}/bin/testhost/**", "", true, false)
                         }
-                            else {
-                                buildCommands += "%WORKSPACE%\\tests\\runtest.cmd ${runtestArguments} TestEnv ${stepScriptLocation}"
-                            }
-                        }
                         else if (isGcReliabilityFramework(scenario)) {
                             buildCommands += "tests\\runtest.cmd ${runtestArguments} GenerateLayoutOnly"
                             buildCommands += "tests\\scripts\\run-gc-reliability-framework.cmd ${arch} ${configuration}"
                         }
-                        else if (architecture == 'x64' || architecture == 'x86') {
+                        else {
                             buildCommands += "tests\\runtest.cmd ${runtestArguments}"
                         }
-                        else if (architecture == 'x86lb') {
-                            buildCommands += "tests\\runtest.cmd ${runtestArguments} TestEnv %WORKSPACE%\\tests\\legacyjit_x86_testenv.cmd"
-                        }
                     }
 
                     if (!enableCorefxTesting) {
@@ -2010,6 +2068,8 @@ combinedScenarios.each { scenario ->
                             }
                             break
                         case 'x86lb':
+                        case 'x86_arm_altjit':
+                        case 'x64_arm64_altjit':
                             if (os != 'Windows_NT') {
                                 return
                             }
@@ -2024,7 +2084,7 @@ combinedScenarios.each { scenario ->
                     }
 
                     // Skip scenarios (blanket skipping for jit stress modes, which are good most everywhere
-                    // with checked builds
+                    // with checked builds)
                     def enableCorefxTesting = false
                     if (Constants.jitStressModeScenarios.containsKey(scenario)) {
                         if (configuration != 'Checked') {
@@ -2050,6 +2110,8 @@ combinedScenarios.each { scenario ->
                                 break
                             case 'x64':
                             case 'x86':
+                            case 'x86_arm_altjit':
+                            case 'x64_arm64_altjit':
                                 // x86 ubuntu: default only
                                 if ((os == 'Ubuntu') && (architecture == 'x86')) {
                                     return
@@ -2228,6 +2290,19 @@ combinedScenarios.each { scenario ->
                         }
                     }
 
+                    // For altjit, don't do any scenarios that don't change compilation. That is, scenarios that only change
+                    // runtime behavior, not compile-time behavior, are not interesting.
+                    switch (architecture) {
+                        case 'x86_arm_altjit':
+                        case 'x64_arm64_altjit':
+                            if (isGCStressRelatedTesting(scenario)) {
+                                return
+                            }
+                            break
+                        default:
+                            break
+                    }
+
                     // Calculate names
                     def lowerConfiguration = configuration.toLowerCase()
                     def jobName = getJobName(configuration, architecture, os, scenario, isBuildOnly)
diff --git a/tests/runtest.cmd b/tests/runtest.cmd
index 936383e..84136a4 100644
--- a/tests/runtest.cmd
+++ b/tests/runtest.cmd
@@ -204,7 +204,7 @@ call :PrecompileFX
 
 if  defined __GenerateLayoutOnly (
     REM Delete the unecessary mscorlib.ni file.
-    del %CORE_ROOT%\mscorlib.ni.dll
+    if exist %CORE_ROOT%\mscorlib.ni.dll del %CORE_ROOT%\mscorlib.ni.dll
     exit /b 0
 )
 
@@ -240,7 +240,7 @@ echo %__MsgPrefix%CORE_ROOT that will be used is: %CORE_ROOT%
 echo %__MsgPrefix%Starting the test run ...
 
 REM Delete the unecessary mscorlib.ni file.
-del %CORE_ROOT%\mscorlib.ni.dll
+if exist %CORE_ROOT%\mscorlib.ni.dll del %CORE_ROOT%\mscorlib.ni.dll
 
 set __BuildLogRootName=TestRunResults
 call :msbuild "%__ProjectFilesDir%\runtest.proj" /p:Runtests=true /clp:showcommandline
diff --git a/tests/x64_arm64_altjit.cmd b/tests/x64_arm64_altjit.cmd
new file mode 100644
index 0000000..d6c3fdd
--- /dev/null
+++ b/tests/x64_arm64_altjit.cmd
@@ -0,0 +1,6 @@
+set COMPlus_AltJit=*
+set COMPlus_AltJitNgen=*
+set COMPlus_AltJitName=protononjit.dll
+set COMPlus_NoGuiOnAssert=1
+set COMPlus_ContinueOnAssert=0
+set COMPlus_AltJitAssertOnNYI=1
diff --git a/tests/x86_arm_altjit.cmd b/tests/x86_arm_altjit.cmd
new file mode 100644
index 0000000..d6c3fdd
--- /dev/null
+++ b/tests/x86_arm_altjit.cmd
@@ -0,0 +1,6 @@
+set COMPlus_AltJit=*
+set COMPlus_AltJitNgen=*
+set COMPlus_AltJitName=protononjit.dll
+set COMPlus_NoGuiOnAssert=1
+set COMPlus_ContinueOnAssert=0
+set COMPlus_AltJitAssertOnNYI=1
-- 
2.7.4

