From 2bd79b76a5b0f34808e880b14b6314bbbfc71c6f Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Fri, 22 Sep 2017 12:07:43 -0400
Subject: [PATCH] [Arm64] Add GT_JCMP node

Create new node type GT_JCMP to represent a
fused Relop + JTrue which does not set flags

Add lowering code to create GT_JCMP when
Arm64 could use cbz, cbnz, tbz, or tbnz
---
 src/jit/codegenarm64.cpp   | 49 ++++++++++++++++++++++++++++++++++++++++++++++
 src/jit/codegenarmarch.cpp |  6 ++++++
 src/jit/codegenlinear.h    |  3 +++
 src/jit/flowgraph.cpp      |  1 +
 src/jit/gentree.cpp        | 12 ++++++++++++
 src/jit/gentree.h          |  5 ++++-
 src/jit/gtlist.h           |  1 +
 src/jit/liveness.cpp       |  1 +
 src/jit/lower.cpp          |  2 ++
 src/jit/lowerarmarch.cpp   | 34 ++++++++++++++++++++++++++++++++
 src/jit/lsra.cpp           |  2 +-
 src/jit/lsraarm64.cpp      |  1 +
 src/jit/rationalize.cpp    |  4 ++--
 13 files changed, 117 insertions(+), 4 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index e16d151..71ea16f 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -3382,6 +3382,55 @@ void CodeGen::genCodeForCompare(GenTreeOp* tree)
     }
 }
 
+//------------------------------------------------------------------------
+// genCodeForJumpCompare: Generates code for jmpCompare statement.
+//
+// Arguments:
+//    tree - The GT_JCMP tree node.
+//
+// Return Value:
+//    None
+//
+void CodeGen::genCodeForJumpCompare(GenTreeOp* tree)
+{
+    assert(compiler->compCurBB->bbJumpKind == BBJ_COND);
+
+    GenTree* op1 = tree->gtGetOp1();
+    GenTree* op2 = tree->gtGetOp2();
+
+    assert(tree->OperIs(GT_JCMP));
+    assert(!varTypeIsFloating(tree));
+    assert(!op1->isUsedFromMemory());
+    assert(!op2->isUsedFromMemory());
+    assert(op2->IsCnsIntOrI());
+    assert(op2->isContained());
+
+    genConsumeOperands(tree);
+
+    regNumber reg  = op1->gtRegNum;
+    emitAttr  attr = emitActualTypeSize(op1->TypeGet());
+
+    if (tree->gtFlags & GTF_JCMP_TST)
+    {
+        ssize_t compareImm = op2->gtIntCon.IconValue();
+
+        assert(isPow2(compareImm));
+
+        instruction ins = (tree->gtFlags & GTF_JCMP_EQ) ? INS_tbz : INS_tbnz;
+        int         imm = genLog2((size_t)compareImm);
+
+        getEmitter()->emitIns_J_R_I(ins, attr, compiler->compCurBB->bbJumpDest, reg, imm);
+    }
+    else
+    {
+        assert(op2->IsIntegralConst(0));
+
+        instruction ins = (tree->gtFlags & GTF_JCMP_EQ) ? INS_cbz : INS_cbnz;
+
+        getEmitter()->emitIns_J_R(ins, attr, compiler->compCurBB->bbJumpDest, reg);
+    }
+}
+
 int CodeGenInterface::genSPtoFPdelta()
 {
     int delta;
diff --git a/src/jit/codegenarmarch.cpp b/src/jit/codegenarmarch.cpp
index b3f1917..22aed10 100644
--- a/src/jit/codegenarmarch.cpp
+++ b/src/jit/codegenarmarch.cpp
@@ -282,6 +282,12 @@ void CodeGen::genCodeForTreeNode(GenTreePtr treeNode)
             genCodeForJumpTrue(treeNode);
             break;
 
+#ifdef _TARGET_ARM64_
+        case GT_JCMP:
+            genCodeForJumpCompare(treeNode->AsOp());
+            break;
+#endif // _TARGET_ARM64_
+
         case GT_JCC:
             genCodeForJcc(treeNode->AsCC());
             break;
diff --git a/src/jit/codegenlinear.h b/src/jit/codegenlinear.h
index f3f6e9d..2cee11d 100644
--- a/src/jit/codegenlinear.h
+++ b/src/jit/codegenlinear.h
@@ -266,6 +266,9 @@ void genCallInstruction(GenTreeCall* call);
 void genJmpMethod(GenTreePtr jmp);
 BasicBlock* genCallFinally(BasicBlock* block);
 void genCodeForJumpTrue(GenTreePtr tree);
+#ifdef _TARGET_ARM64_
+void genCodeForJumpCompare(GenTreeOp* tree);
+#endif // _TARGET_ARM64_
 
 #if FEATURE_EH_FUNCLETS
 void genEHCatchRet(BasicBlock* block);
diff --git a/src/jit/flowgraph.cpp b/src/jit/flowgraph.cpp
index ff32693..658453c 100644
--- a/src/jit/flowgraph.cpp
+++ b/src/jit/flowgraph.cpp
@@ -9952,6 +9952,7 @@ inline bool OperIsControlFlow(genTreeOps oper)
     switch (oper)
     {
         case GT_JTRUE:
+        case GT_JCMP:
         case GT_JCC:
         case GT_SWITCH:
         case GT_LABEL:
diff --git a/src/jit/gentree.cpp b/src/jit/gentree.cpp
index 965b524..4c938eb 100644
--- a/src/jit/gentree.cpp
+++ b/src/jit/gentree.cpp
@@ -2542,6 +2542,10 @@ GenTreePtr Compiler::gtReverseCond(GenTree* tree)
         GenTreeCC* cc   = tree->AsCC();
         cc->gtCondition = GenTree::ReverseRelop(cc->gtCondition);
     }
+    else if (tree->OperIs(GT_JCMP))
+    {
+        tree->gtFlags ^= GTF_JCMP_EQ;
+    }
     else
     {
         tree = gtNewOperNode(GT_NOT, TYP_INT, tree);
@@ -9874,6 +9878,11 @@ void Compiler::gtDispNode(GenTreePtr tree, IndentStack* indentStack, __in __in_z
                 }
                 goto DASH;
 
+            case GT_JCMP:
+                printf((tree->gtFlags & GTF_JCMP_TST) ? "T" : "C");
+                printf((tree->gtFlags & GTF_JCMP_EQ) ? "EQ" : "NE");
+                goto DASH;
+
             default:
             DASH:
                 printf("-");
@@ -10786,6 +10795,9 @@ void Compiler::gtDispLeaf(GenTree* tree, IndentStack* indentStack)
         case GT_SETCC:
             printf(" cond=%s", GenTree::OpName(tree->AsCC()->gtCondition));
             break;
+        case GT_JCMP:
+            printf(" cond=%s%s", (tree->gtFlags & GTF_JCMP_TST) ? "TEST_" : "",
+                   (tree->gtFlags & GTF_JCMP_EQ) ? "EQ" : "NE");
 
         default:
             assert(!"don't know how to display tree leaf node");
diff --git a/src/jit/gentree.h b/src/jit/gentree.h
index 62bd8cb..bd27050 100644
--- a/src/jit/gentree.h
+++ b/src/jit/gentree.h
@@ -991,6 +991,9 @@ public:
 #define GTF_RELOP_ZTT               0x08000000 // GT_<relop> -- Loop test cloned for converting while-loops into do-while
                                                //               with explicit "loop test" in the header block.
 
+#define GTF_JCMP_EQ                 0x80000000 // GTF_JCMP_EQ  -- Branch on equalrather than not equal
+#define GTF_JCMP_TST                0x40000000 // GTF_JCMP_TST -- Use test rather than compare
+
 #define GTF_RET_MERGED              0x80000000 // GT_RETURN -- This is a return generated during epilog merging.
 
 #define GTF_QMARK_CAST_INSTOF       0x80000000 // GT_QMARK -- Is this a top (not nested) level qmark created for
@@ -1632,7 +1635,7 @@ public:
 
     bool OperIsConditionalJump() const
     {
-        return (gtOper == GT_JTRUE) || (gtOper == GT_JCC);
+        return (gtOper == GT_JTRUE) || (gtOper == GT_JCMP) || (gtOper == GT_JCC);
     }
 
     static bool OperIsBoundsCheck(genTreeOps op)
diff --git a/src/jit/gtlist.h b/src/jit/gtlist.h
index 2c21fe1..939f00c 100644
--- a/src/jit/gtlist.h
+++ b/src/jit/gtlist.h
@@ -225,6 +225,7 @@ GTNODE(SIMD             , GenTreeSIMD        ,0,GTK_BINOP|GTK_EXOP)     // SIMD
 
 GTNODE(CMP              , GenTreeOp          ,0,GTK_BINOP|GTK_NOVALUE)  // Sets the condition flags according to the compare result. 
                                                                         // N.B. Not a relop, it does not produce a value and it cannot be reversed.
+GTNODE(JCMP             , GenTreeOp          ,0,GTK_BINOP|GTK_NOVALUE)  // Makes a comparison and jump if the condition specified.  Does not set flags
 GTNODE(JCC              , GenTreeCC          ,0,GTK_LEAF|GTK_NOVALUE)   // Checks the condition flags and branch if the condition specified
                                                                         // by GenTreeCC::gtCondition is true.
 GTNODE(SETCC            , GenTreeCC          ,0,GTK_LEAF)               // Checks the condition flags and produces 1 if the condition specified 
diff --git a/src/jit/liveness.cpp b/src/jit/liveness.cpp
index fdec25b..7b4d316 100644
--- a/src/jit/liveness.cpp
+++ b/src/jit/liveness.cpp
@@ -2184,6 +2184,7 @@ void Compiler::fgComputeLifeLIR(VARSET_TP& life, BasicBlock* block, VARSET_VALAR
 #if defined(FEATURE_SIMD)
             case GT_SIMD_CHK:
 #endif // FEATURE_SIMD
+            case GT_JCMP:
             case GT_CMP:
             case GT_JCC:
             case GT_JTRUE:
diff --git a/src/jit/lower.cpp b/src/jit/lower.cpp
index 27559c8..b37e7d0 100644
--- a/src/jit/lower.cpp
+++ b/src/jit/lower.cpp
@@ -188,6 +188,7 @@ GenTree* Lowering::LowerNode(GenTree* node)
         case GT_TEST_EQ:
         case GT_TEST_NE:
         case GT_CMP:
+        case GT_JCMP:
             LowerCompare(node);
             break;
 
@@ -5349,6 +5350,7 @@ void Lowering::ContainCheckNode(GenTree* node)
         case GT_TEST_EQ:
         case GT_TEST_NE:
         case GT_CMP:
+        case GT_JCMP:
             ContainCheckCompare(node->AsOp());
             break;
 
diff --git a/src/jit/lowerarmarch.cpp b/src/jit/lowerarmarch.cpp
index a0a11fe..727e9f1 100644
--- a/src/jit/lowerarmarch.cpp
+++ b/src/jit/lowerarmarch.cpp
@@ -121,6 +121,7 @@ bool Lowering::IsContainableImmed(GenTree* parentNode, GenTree* childNode)
             case GT_LE:
             case GT_GE:
             case GT_GT:
+            case GT_JCMP:
                 return emitter::emitIns_valid_imm_for_cmp(immVal, size);
                 break;
             case GT_AND:
@@ -717,6 +718,39 @@ void Lowering::ContainCheckCompare(GenTreeOp* cmp)
             op1->gtFlags |= GTF_SET_FLAGS;
             cmp->gtFlags |= GTF_USE_FLAGS;
         }
+
+        if (!varTypeIsFloating(cmp) && op2->IsCnsIntOrI() && ((cmp->gtFlags & GTF_USE_FLAGS) == 0))
+        {
+            LIR::Use cmpUse;
+            bool     useJCMP = false;
+            uint64_t flags   = 0;
+
+            if (cmp->OperIs(GT_EQ, GT_NE) && op2->IsIntegralConst(0) && BlockRange().TryGetUse(cmp, &cmpUse) &&
+                cmpUse.User()->OperIs(GT_JTRUE))
+            {
+                // Codegen will use cbz or cbnz in codegen which do not affect the flag register
+                flags   = cmp->OperIs(GT_EQ) ? GTF_JCMP_EQ : 0;
+                useJCMP = true;
+            }
+            else if (cmp->OperIs(GT_TEST_EQ, GT_TEST_NE) && isPow2(op2->gtIntCon.IconValue()) &&
+                     BlockRange().TryGetUse(cmp, &cmpUse) && cmpUse.User()->OperIs(GT_JTRUE))
+            {
+                // Codegen will use tbz or tbnz in codegen which do not affect the flag register
+                flags   = GTF_JCMP_TST | (cmp->OperIs(GT_TEST_EQ) ? GTF_JCMP_EQ : 0);
+                useJCMP = true;
+            }
+
+            if (useJCMP)
+            {
+                cmp->gtLsraInfo.isNoRegCompare = true;
+                cmp->SetOper(GT_JCMP);
+
+                cmp->gtFlags &= ~(GTF_JCMP_TST | GTF_JCMP_EQ);
+                cmp->gtFlags |= flags;
+
+                BlockRange().Remove(cmpUse.User());
+            }
+        }
 #endif // _TARGET_ARM64_
     }
 }
diff --git a/src/jit/lsra.cpp b/src/jit/lsra.cpp
index 6d6567d..b5a8f8a 100644
--- a/src/jit/lsra.cpp
+++ b/src/jit/lsra.cpp
@@ -3554,7 +3554,7 @@ static int ComputeOperandDstCount(GenTree* operand)
         // If an operand has no destination registers but does have source registers, it must be a store
         // or a compare.
         assert(operand->OperIsStore() || operand->OperIsBlkOp() || operand->OperIsPutArgStk() ||
-               operand->OperIsCompare() || operand->OperIs(GT_CMP) || operand->IsSIMDEqualityOrInequality());
+               operand->OperIsCompare() || operand->OperIs(GT_CMP, GT_JCMP) || operand->IsSIMDEqualityOrInequality());
         return 0;
     }
     else if (!operand->OperIsFieldListHead() && (operand->OperIsStore() || operand->TypeGet() == TYP_VOID))
diff --git a/src/jit/lsraarm64.cpp b/src/jit/lsraarm64.cpp
index 0b6891a..83f6d64 100644
--- a/src/jit/lsraarm64.cpp
+++ b/src/jit/lsraarm64.cpp
@@ -354,6 +354,7 @@ void LinearScan::TreeNodeInfoInit(GenTree* tree)
         case GT_GT:
         case GT_TEST_EQ:
         case GT_TEST_NE:
+        case GT_JCMP:
             TreeNodeInfoInitCmp(tree);
             break;
 
diff --git a/src/jit/rationalize.cpp b/src/jit/rationalize.cpp
index 257e02d..a5ae268 100644
--- a/src/jit/rationalize.cpp
+++ b/src/jit/rationalize.cpp
@@ -922,8 +922,8 @@ Compiler::fgWalkResult Rationalizer::RewriteNode(GenTree** useEdge, ArrayStack<G
 #endif // FEATURE_SIMD
 
         default:
-            // CMP, SETCC and JCC nodes should not be present in HIR.
-            assert(!node->OperIs(GT_CMP, GT_SETCC, GT_JCC));
+            // JCMP, CMP, SETCC and JCC nodes should not be present in HIR.
+            assert(!node->OperIs(GT_CMP, GT_SETCC, GT_JCC, GT_JCMP));
             break;
     }
 
-- 
2.7.4

