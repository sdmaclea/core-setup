From b49feeeb4bac2f3c8e28f6823634d50aa2237226 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Thu, 1 Feb 2018 08:22:18 -0500
Subject: [PATCH] [Arm64] Add Lower Compare Zero comments

---
 src/jit/codegenarm64.cpp |  2 +-
 src/jit/lowerarmarch.cpp | 14 ++++++++++----
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index 4567820..bb8baa2 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -5122,7 +5122,7 @@ void CodeGen::genHWIntrinsicSimdBinaryOp(GenTreeHWIntrinsic* node)
 // In cases where an instruction only supports const immediate operands, we
 // need to generate functionally correct code when the operand is not constant
 //
-// This is required by the HW Intrinsic design to handle:
+// This is required by the HW Intrinsic design to handle indirect calls, such as:
 //   debugger calls
 //   reflection
 //   call backs
diff --git a/src/jit/lowerarmarch.cpp b/src/jit/lowerarmarch.cpp
index 1223975..8ff48f2 100644
--- a/src/jit/lowerarmarch.cpp
+++ b/src/jit/lowerarmarch.cpp
@@ -522,6 +522,12 @@ void Lowering::LowerHWIntrinsic(GenTreeHWIntrinsic* node)
     auto intrinsicID   = node->gtHWIntrinsicId;
     auto intrinsicInfo = comp->getHWIntrinsicInfo(node->gtHWIntrinsicId);
 
+    //
+    // Lower unsupported Unsigned Compare Zero intrinsics to their trivial transformations
+    //
+    // ARM64 does not support most forms of compare zero for Unsigned values
+    // This is because some are non-sensical, and the rest are trivial transformations of other operators
+    //
     if ((intrinsicInfo.flags & HWIntrinsicInfo::LowerCmpUZero) && varTypeIsUnsigned(node->gtSIMDBaseType))
     {
         auto setAllVector = node->gtSIMDSize > 8 ? NI_ARM64_SIMD_SetAllVector128 : NI_ARM64_SIMD_SetAllVector64;
@@ -531,14 +537,14 @@ void Lowering::LowerHWIntrinsic(GenTreeHWIntrinsic* node)
         switch (intrinsicID)
         {
             case NI_ARM64_SIMD_GE_ZERO:
-                // Always true
+                // Unsigned >= 0 ==> Always true
                 node->gtHWIntrinsicId = setAllVector;
                 node->gtOp.gtOp1      = comp->gtNewLconNode(~0ULL);
                 BlockRange().InsertBefore(node, node->gtOp.gtOp1);
                 BlockRange().Remove(origOp1);
                 break;
             case NI_ARM64_SIMD_GT_ZERO:
-                // Same as !EQ
+                // Unsigned > 0 ==> !(Unsigned == 0)
                 node->gtOp.gtOp1 =
                     comp->gtNewSimdHWIntrinsicNode(node->TypeGet(), node->gtOp.gtOp1, NI_ARM64_SIMD_EQ_ZERO,
                                                    node->gtSIMDBaseType, node->gtSIMDSize);
@@ -546,11 +552,11 @@ void Lowering::LowerHWIntrinsic(GenTreeHWIntrinsic* node)
                 BlockRange().InsertBefore(node, node->gtOp.gtOp1);
                 break;
             case NI_ARM64_SIMD_LE_ZERO:
-                // Same as EQ
+                // Unsigned <= 0 ==> Unsigned == 0
                 node->gtHWIntrinsicId = NI_ARM64_SIMD_EQ_ZERO;
                 break;
             case NI_ARM64_SIMD_LT_ZERO:
-                // Always false
+                // Unsigned < 0 ==> Always false
                 node->gtHWIntrinsicId = setAllVector;
                 node->gtOp.gtOp1      = comp->gtNewIconNode(0);
                 BlockRange().InsertBefore(node, node->gtOp.gtOp1);
-- 
2.7.4

