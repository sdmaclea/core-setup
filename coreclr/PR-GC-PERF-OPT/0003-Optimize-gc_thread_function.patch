From 67e4df6ffeec788d8b5980917f7b3a0b4767b748 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Wed, 5 Jul 2017 18:41:04 +0000
Subject: [PATCH] Optimize gc_thread_function()

---
 src/gc/gc.cpp | 33 +++++++++++++++++++--------------
 1 file changed, 19 insertions(+), 14 deletions(-)

diff --git a/src/gc/gc.cpp b/src/gc/gc.cpp
index 85a9a6c..e4e8b73 100644
--- a/src/gc/gc.cpp
+++ b/src/gc/gc.cpp
@@ -5262,6 +5262,8 @@ void gc_heap::gc_thread_function ()
     {
         assert (!gc_t_join.joined());
 
+        bool proceed = TRUE;
+
         if (heap_number == 0)
         {
             gc_heap::ee_suspend_event.Wait(INFINITE, FALSE);
@@ -5270,30 +5272,36 @@ void gc_heap::gc_thread_function ()
             GCToEEInterface::SuspendEE(SUSPEND_FOR_GC);
             END_TIMING(suspend_ee_during_log);
 
-            proceed_with_gc_p = TRUE;
-
             if (!should_proceed_with_gc())
             {
                 update_collection_counts_for_no_gc();
-                proceed_with_gc_p = FALSE;
+                proceed = FALSE;
             }
             else
                 settings.init_mechanisms();
             dprintf (3, ("%d gc thread waiting...", heap_number));
+
+            proceed_with_gc_p = proceed;
+
+            if (proceed)
+            {
                 gc_start_event.Set();
             }
+        }
         else
         {
             gc_start_event.Wait(INFINITE, FALSE);
             dprintf (3, ("%d gc thread waiting... Done", heap_number));
         }
 
-        if (proceed_with_gc_p)
+        if (proceed)
+        {
             garbage_collect (GCHeap::GcCondemnedGeneration);
+        }
 
         if (heap_number == 0)
         {
-            if (proceed_with_gc_p && (!settings.concurrent))
+            if (proceed && (!settings.concurrent))
             {
                 do_post_gc();
             }
@@ -5324,18 +5332,15 @@ void gc_heap::gc_thread_function ()
 
             gc_heap::internal_gc_done = true;
 
-            set_gc_done();
-        }
-        else
-        {
-            int spin_count = 32 * (gc_heap::n_heaps - 1);
-
-            // wait until RestartEE has progressed to a stage where we can restart user threads
-            while (!gc_heap::internal_gc_done && !GCHeap::SafeToRestartManagedThreads())
+#ifdef MULTIPLE_HEAPS
+            for (int i = 0; i < gc_heap::n_heaps; i++)
             {
-                spin_and_switch (spin_count, (gc_heap::internal_gc_done || GCHeap::SafeToRestartManagedThreads()));
+                gc_heap::g_heaps[i]->set_gc_done();
             }
+            MemoryBarrier();
+#else
             set_gc_done();
+#endif //MULTIPLE_HEAPS
         }
     }
 }
-- 
2.7.4

