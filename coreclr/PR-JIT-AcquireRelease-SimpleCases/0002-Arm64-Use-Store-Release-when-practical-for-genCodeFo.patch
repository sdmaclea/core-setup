From e311d87cda60347644d87bea9de18d37f9e5a162 Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies, Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Fri, 26 May 2017 18:39:12 +0000
Subject: [PATCH] [Arm64] Use Store Release when practical for
 genCodeForStoreInd

---
 src/jit/codegenarm64.cpp | 33 +++++++++++++++++++++++++++++++--
 1 file changed, 31 insertions(+), 2 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index d73f7ce..77947d4 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -3335,6 +3335,8 @@ void CodeGen::genCodeForStoreInd(GenTreeStoreInd* tree)
     GenTree*    addr       = tree->Addr();
     var_types   targetType = tree->TypeGet();
     emitter*    emit       = getEmitter();
+    emitAttr    attr       = emitTypeSize(tree);
+    instruction ins        = ins_Store(targetType);
 
     GCInfo::WriteBarrierForm writeBarrierForm = gcInfo.gcIsWriteBarrierCandidate(tree, data);
     if (writeBarrierForm != GCInfo::WBF_NoBarrier)
@@ -3409,11 +3411,38 @@ void CodeGen::genCodeForStoreInd(GenTreeStoreInd* tree)
 
         if (tree->gtFlags & GTF_IND_VOLATILE)
         {
-            // issue a full memory barrier a before volatile StInd
+            bool useStoreRelease = (dataReg >= REG_INT_FIRST) && (dataReg <= REG_ZR) && !addr->isContained() &&
+                                   ((attr == EA_1BYTE) || !(tree->gtFlags & GTF_IND_UNALIGNED));
+
+            if (useStoreRelease)
+            {
+                switch (EA_SIZE(attr))
+                {
+                    case EA_1BYTE:
+                        assert(ins == INS_strb);
+                        ins = INS_stlrb;
+                        break;
+                    case EA_2BYTE:
+                        assert(ins == INS_strh);
+                        ins = INS_stlrh;
+                        break;
+                    case EA_4BYTE:
+                    case EA_8BYTE:
+                        assert(ins == INS_str);
+                        ins = INS_stlr;
+                        break;
+                    default:
+                        assert(false); // We should not get here
+                }
+            }
+            else
+            {
+                // issue a full memory barrier before a volatile StInd
                 instGen_MemoryBarrier();
             }
+        }
 
-        emit->emitInsLoadStoreOp(ins_Store(targetType), emitTypeSize(tree), dataReg, tree);
+        emit->emitInsLoadStoreOp(ins, attr, dataReg, tree);
     }
 }
 
-- 
2.7.4

