From 5d16da3f37041c797ad39571d0e88b73e8aaad7a Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies, Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Tue, 9 May 2017 19:45:49 +0000
Subject: [PATCH] [Arm64] Support GTF_IND_VOLATILE

Addresses #9711 for arm64
---
 src/jit/codegenarm64.cpp   | 25 +++++++++++++++++++++++++
 src/jit/codegenarmarch.cpp | 21 +++++++++++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index 8c87bc1..fa45e7c 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -2664,6 +2664,11 @@ void CodeGen::genCodeForCpBlkUnroll(GenTreeBlk* cpBlkNode)
 
     emitter* emit = getEmitter();
 
+    if (cpBlkNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
+
     if (source->gtOper == GT_IND)
     {
         srcAddr = source->gtGetOp1();
@@ -2742,6 +2747,11 @@ void CodeGen::genCodeForCpBlkUnroll(GenTreeBlk* cpBlkNode)
             genCodeForStoreOffset(INS_strb, EA_1BYTE, tmpReg, dstAddr, offset);
         }
     }
+
+    if (cpBlkNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
 }
 
 // Generate code for CpObj nodes wich copy structs that have interleaved
@@ -2820,6 +2830,11 @@ void CodeGen::genCodeForCpObj(GenTreeObj* cpObjNode)
         assert(tmpReg2 != REG_WRITE_BARRIER_SRC_BYREF);
     }
 
+    if (cpObjNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
+
     emitter* emit = getEmitter();
 
     BYTE* gcPtrs = cpObjNode->gtGcPtrs;
@@ -2896,6 +2911,11 @@ void CodeGen::genCodeForCpObj(GenTreeObj* cpObjNode)
     // While we normally update GC info prior to the last instruction that uses them,
     // these actually live into the helper call.
     gcInfo.gcMarkRegSetNpt(RBM_WRITE_BARRIER_SRC_BYREF | RBM_WRITE_BARRIER_DST_BYREF);
+
+    if (cpObjNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
 }
 
 // generate code do a switch statement based on a table of ip-relative offsets
@@ -3564,6 +3584,11 @@ void CodeGen::genCodeForStoreInd(GenTreeStoreInd* tree)
             dataReg = data->gtRegNum;
         }
 
+        if (tree->gtFlags & GTF_IND_VOLATILE)
+        {
+            instGen_MemoryBarrier();
+        }
+
         emit->emitInsLoadStoreOp(ins_Store(targetType), emitTypeSize(tree), dataReg, tree);
     }
 }
diff --git a/src/jit/codegenarmarch.cpp b/src/jit/codegenarmarch.cpp
index aea4327..a8758e5 100644
--- a/src/jit/codegenarmarch.cpp
+++ b/src/jit/codegenarmarch.cpp
@@ -1359,6 +1359,11 @@ void CodeGen::genCodeForIndir(GenTreeIndir* tree)
     genConsumeAddress(tree->Addr());
     emit->emitInsLoadStoreOp(ins_Load(targetType), emitTypeSize(tree), targetReg, tree);
     genProduceReg(tree);
+
+    if (tree->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
 }
 
 // Generate code for a CpBlk node by the means of the VM memcpy helper call
@@ -1381,7 +1386,17 @@ void CodeGen::genCodeForCpBlk(GenTreeBlk* cpBlkNode)
     }
 #endif // _TARGET_ARM64_
 
+    if (cpBlkNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
+
     genEmitHelperCall(CORINFO_HELP_MEMCPY, 0, EA_UNKNOWN);
+
+    if (cpBlkNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
 }
 
 // Generates code for InitBlk by calling the VM memset helper function.
@@ -1418,6 +1433,12 @@ void CodeGen::genCodeForInitBlk(GenTreeBlk* initBlkNode)
 #endif // _TARGET_ARM64_
 
     genConsumeBlockOp(initBlkNode, REG_ARG_0, REG_ARG_1, REG_ARG_2);
+
+    if (initBlkNode->gtFlags & GTF_IND_VOLATILE)
+    {
+        instGen_MemoryBarrier();
+    }
+
     genEmitHelperCall(CORINFO_HELP_MEMSET, 0, EA_UNKNOWN);
 }
 
-- 
2.7.4

