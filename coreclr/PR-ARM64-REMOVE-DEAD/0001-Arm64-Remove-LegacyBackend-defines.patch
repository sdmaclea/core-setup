From 6d2c21faf54e4fdad47c36e700cf415a5f177305 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Wed, 20 Sep 2017 19:05:43 -0400
Subject: [PATCH] [Arm64] Remove LegacyBackend defines

---
 src/jit/codegenarm64.cpp |  8 ++++----
 src/jit/compiler.h       | 15 ---------------
 2 files changed, 4 insertions(+), 19 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index a6e5d75..4ecba7d 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -1292,7 +1292,7 @@ BasicBlock* CodeGen::genCallFinally(BasicBlock* block)
 
         if ((block->bbNext == nullptr) || !BasicBlock::sameEHRegion(block, block->bbNext))
         {
-            instGen(INS_BREAKPOINT); // This should never get executed
+            instGen(INS_bkpt); // This should never get executed
         }
     }
     else
@@ -1849,7 +1849,7 @@ void CodeGen::genLclHeap(GenTreePtr tree)
         BasicBlock*  esp_check = genCreateTempLabel();
         emitJumpKind jmpEqual  = genJumpKindForOper(GT_EQ, CK_SIGNED);
         inst_JMP(jmpEqual, esp_check);
-        getEmitter()->emitIns(INS_BREAKPOINT);
+        getEmitter()->emitIns(INS_bkpt);
         genDefineTempLabel(esp_check);
     }
 #endif
@@ -1888,7 +1888,7 @@ void CodeGen::genLclHeap(GenTreePtr tree)
         // If 0 bail out by returning null in targetReg
         genConsumeRegAndCopy(size, targetReg);
         endLabel = genCreateTempLabel();
-        getEmitter()->emitIns_R_R(INS_TEST, easz, targetReg, targetReg);
+        getEmitter()->emitIns_R_R(INS_tst, easz, targetReg, targetReg);
         emitJumpKind jmpEqual = genJumpKindForOper(GT_EQ, CK_SIGNED);
         inst_JMP(jmpEqual, endLabel);
 
@@ -1912,7 +1912,7 @@ void CodeGen::genLclHeap(GenTreePtr tree)
         // Align to STACK_ALIGN
         // regCnt will be the total number of bytes to localloc
         inst_RV_IV(INS_add, regCnt, (STACK_ALIGN - 1), emitActualTypeSize(type));
-        inst_RV_IV(INS_AND, regCnt, ~(STACK_ALIGN - 1), emitActualTypeSize(type));
+        inst_RV_IV(INS_and, regCnt, ~(STACK_ALIGN - 1), emitActualTypeSize(type));
     }
 
     stackAdjustment = 0;
diff --git a/src/jit/compiler.h b/src/jit/compiler.h
index 0997154..c04765b 100644
--- a/src/jit/compiler.h
+++ b/src/jit/compiler.h
@@ -10287,23 +10287,8 @@ const instruction INS_SQRT  = INS_vsqrt;
 
 #ifdef _TARGET_ARM64_
 
-const instruction INS_SHIFT_LEFT_LOGICAL  = INS_lsl;
-const instruction INS_SHIFT_RIGHT_LOGICAL = INS_lsr;
-const instruction INS_SHIFT_RIGHT_ARITHM  = INS_asr;
-
-const instruction INS_AND             = INS_and;
-const instruction INS_OR              = INS_orr;
-const instruction INS_XOR             = INS_eor;
-const instruction INS_NEG             = INS_neg;
-const instruction INS_TEST            = INS_tst;
-const instruction INS_MUL             = INS_mul;
 const instruction INS_MULADD          = INS_madd;
-const instruction INS_SIGNED_DIVIDE   = INS_sdiv;
-const instruction INS_UNSIGNED_DIVIDE = INS_udiv;
 const instruction INS_BREAKPOINT      = INS_bkpt;
-const instruction INS_ADDC            = INS_adc;
-const instruction INS_SUBC            = INS_sbc;
-const instruction INS_NOT             = INS_mvn;
 
 const instruction INS_ABS   = INS_fabs;
 const instruction INS_ROUND = INS_frintn;
-- 
2.7.4

