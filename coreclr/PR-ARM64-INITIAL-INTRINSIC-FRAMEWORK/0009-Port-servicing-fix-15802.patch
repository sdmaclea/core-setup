From dce9085e36908c076417ae56b5b8ce69480a29f2 Mon Sep 17 00:00:00 2001
From: Tarek Mahmoud Sayed <tarekms@microsoft.com>
Date: Tue, 9 Jan 2018 21:08:34 -0800
Subject: [PATCH] Port servicing fix (#15802)

* Port the servicing fix

This is porting the servcing fix https://github.com/dotnet/coreclr/commit/8ce622d569fae9feb160399db03dc2b86577be1b  with a small change to get rid of unsafe code in CultureData per Jan recommendation

* remove un-needed lines

* rename the variable name as it is not a pointer anymore
---
 .../System/Globalization/CultureData.Windows.cs    |  1 +
 .../src/System/Globalization/CultureData.cs        | 28 ++++++++++++++--------
 2 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/src/mscorlib/src/System/Globalization/CultureData.Windows.cs b/src/mscorlib/src/System/Globalization/CultureData.Windows.cs
index 7651311..f48859f 100644
--- a/src/mscorlib/src/System/Globalization/CultureData.Windows.cs
+++ b/src/mscorlib/src/System/Globalization/CultureData.Windows.cs
@@ -277,6 +277,7 @@ namespace System.Globalization
         // region name match the requested region name
         private static CultureData GetCultureDataFromRegionName(String regionName)
         {
+            Debug.Assert(!GlobalizationMode.Invariant);
             Debug.Assert(regionName != null);
 
             const uint LOCALE_SUPPLEMENTAL = 0x00000002;
diff --git a/src/mscorlib/src/System/Globalization/CultureData.cs b/src/mscorlib/src/System/Globalization/CultureData.cs
index d913a89..8992460 100644
--- a/src/mscorlib/src/System/Globalization/CultureData.cs
+++ b/src/mscorlib/src/System/Globalization/CultureData.cs
@@ -369,7 +369,7 @@ namespace System.Globalization
             }
 
             // If not found in the hard coded table we'll have to find a culture that works for us
-            if (retVal == null || (retVal.IsNeutralCulture == true))
+            if (!GlobalizationMode.Invariant && (retVal == null || (retVal.IsNeutralCulture == true)))
             {
                 retVal = GetCultureDataFromRegionName(cultureName);
             }
@@ -626,14 +626,19 @@ namespace System.Globalization
             return culture;
         }
 
-        private static unsafe string NormalizeCultureName(string name, out bool isNeutralName)
+        private static string NormalizeCultureName(string name, out bool isNeutralName)
         {
             isNeutralName = true;
             int i = 0;
 
-            Debug.Assert(name.Length <= LOCALE_NAME_MAX_LENGTH);
+            if (name.Length > LOCALE_NAME_MAX_LENGTH)
+            {
+                // Theoretically we shouldn't hit this exception.
+                throw new ArgumentException(SR.Format(SR.Argument_InvalidId, nameof(name)));
+            }
+
+            Span<char> normalizedName = stackalloc char[name.Length];
 
-            char *pName = stackalloc char[LOCALE_NAME_MAX_LENGTH];
             bool changed = false;
 
             while (i < name.Length && name[i] != '-' && name[i] != '_')
@@ -641,12 +646,12 @@ namespace System.Globalization
                 if (name[i] >= 'A' && name[i] <= 'Z')
                 {
                     // lowercase characters before '-'
-                    pName[i] = (char) (((int)name[i]) + 0x20);
+                    normalizedName[i] = (char) (((int)name[i]) + 0x20);
                     changed = true;
                 }
                 else
                 {
-                    pName[i] = name[i];
+                    normalizedName[i] = name[i];
                 }
                 i++;
             }
@@ -661,18 +666,18 @@ namespace System.Globalization
             {
                 if (name[i] >= 'a' && name[i] <= 'z')
                 {
-                    pName[i] = (char) (((int)name[i]) - 0x20);
+                    normalizedName[i] = (char) (((int)name[i]) - 0x20);
                     changed = true;
                 }
                 else
                 {
-                    pName[i] = name[i];
+                    normalizedName[i] = name[i];
                 }
                 i++;
             }
 
             if (changed)
-                return new string(pName, 0, name.Length);
+                return new string(normalizedName);
 
             return name;
         }
@@ -681,7 +686,10 @@ namespace System.Globalization
         {
             if (GlobalizationMode.Invariant)
             {
-                CultureInfo.VerifyCultureName(cultureName, true);
+                if (cultureName.Length > LOCALE_NAME_MAX_LENGTH || !CultureInfo.VerifyCultureName(cultureName, false))
+                {
+                    return null;
+                }
                 CultureData cd = CreateCultureWithInvariantData();
                 cd._bUseOverrides = useUserOverride;
                 cd._sName = NormalizeCultureName(cultureName, out cd._bNeutral);
-- 
2.7.4

