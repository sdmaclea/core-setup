From 2fad44a3fd79fbdae951fd0bab9d3e4916b36692 Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies, Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Thu, 22 Dec 2016 11:14:32 -0500
Subject: [PATCH] [ARM64/Unix] Add CFI directives

Add native unwind info
---
 src/debug/ee/arm64/dbghelpers.S     | 13 +++---
 src/pal/inc/unixasmmacrosarm64.inc  | 88 ++++++++++++++++++++++++++++---------
 src/vm/arm64/asmhelpers.S           | 86 ++++++++++++++++++------------------
 src/vm/arm64/calldescrworkerarm64.S |  8 ++--
 4 files changed, 122 insertions(+), 73 deletions(-)

diff --git a/src/debug/ee/arm64/dbghelpers.S b/src/debug/ee/arm64/dbghelpers.S
index 5328d69..64932f3 100644
--- a/src/debug/ee/arm64/dbghelpers.S
+++ b/src/debug/ee/arm64/dbghelpers.S
@@ -1,7 +1,8 @@
-//Licensed to the .NET Foundation under one or more agreements. 
+// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 // See the LICENSE file in the project root for more information.
 
+#include "asmconstants.h"
 #include "unixasmmacros.inc"
 
 //
@@ -14,12 +15,12 @@
 // @dbgtodo- once we port Funceval, use the ExceptionHijack stub instead of this func-eval stub.
 NESTED_ENTRY FuncEvalHijack, _TEXT, UnhandledExceptionHandlerUnix
 
-// NOTE: FuncEvalHijackPersonalityRoutine is dependent on the stack layout so if 
-// you change the prolog you will also need to update the personality routine.
+    // NOTE: FuncEvalHijackPersonalityRoutine is dependent on the stack layout so if
+    //       you change the prolog you will also need to update the personality routine.
 
-// push arg to the stack so our personality routine can find it 
-// push lr to get good stacktrace in debugger    
-    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, #-32
+    // push arg to the stack so our personality routine can find it
+    // push lr to get good stacktrace in debugger
+    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, -32
     str x0, [sp, #16]
     // FuncEvalHijackWorker returns the address we should jump to.
     bl FuncEvalHijackWorker
diff --git a/src/pal/inc/unixasmmacrosarm64.inc b/src/pal/inc/unixasmmacrosarm64.inc
index 522c7ad..ed73748 100644
--- a/src/pal/inc/unixasmmacrosarm64.inc
+++ b/src/pal/inc/unixasmmacrosarm64.inc
@@ -31,8 +31,8 @@ C_FUNC(\Name):
 .endm
 
 .macro LEAF_END_MARKED Name, Section
-        .global C_FUNC(\Name\()_End)
 C_FUNC(\Name\()_End):
+        .global C_FUNC(\Name\()_End)
         LEAF_END \Name, \Section
 .endm
 
@@ -48,18 +48,23 @@ C_FUNC(\Name\()_End):
 
 .macro EPILOG_STACK_FREE Size
         add sp, sp, \Size
+        .cfi_adjust_cfa_offset -\Size
 .endm
 
 .macro EPILOG_STACK_RESTORE
         mov sp, fp
+        .cfi_restore sp
 .endm
 
 .macro PROLOG_SAVE_REG reg, ofs
         str \reg, [sp, \ofs]
+        .cfi_rel_offset \reg, \ofs
 .endm
 
 .macro PROLOG_SAVE_REG_PAIR reg1, reg2, ofs
         stp \reg1, \reg2, [sp, \ofs]
+        .cfi_rel_offset \reg1, \ofs
+        .cfi_rel_offset \reg2, \ofs + 8
         .ifc \reg1, fp
         mov fp, sp
         .endif
@@ -67,6 +72,9 @@ C_FUNC(\Name\()_End):
 
 .macro PROLOG_SAVE_REG_PAIR_INDEXED reg1, reg2, ofs
         stp \reg1, \reg2, [sp, \ofs]!
+        .cfi_adjust_cfa_offset -\ofs
+        .cfi_rel_offset \reg1, 0
+        .cfi_rel_offset \reg2, 8
         .ifc \reg1, fp
         mov fp, sp
         .endif
@@ -74,14 +82,20 @@ C_FUNC(\Name\()_End):
 
 .macro EPILOG_RESTORE_REG reg, ofs
         ldr \reg, [sp, \ofs]
+        .cfi_restore \reg1
 .endm
 
 .macro EPILOG_RESTORE_REG_PAIR reg1, reg2, ofs
         ldp \reg1, \reg2, [sp, \ofs]
+        .cfi_restore \reg1
+        .cfi_restore \reg2
 .endm
 
 .macro EPILOG_RESTORE_REG_PAIR_INDEXED reg1, reg2, ofs
         ldp \reg1, \reg2, [sp], \ofs
+        .cfi_restore \reg1
+        .cfi_restore \reg2
+        .cfi_adjust_cfa_offset -\ofs
 .endm
 
 .macro EPILOG_RETURN
@@ -148,13 +162,13 @@ C_FUNC(\Name\()_End):
         __PWTB_StackAlloc = __PWTB_TransitionBlock
         __PWTB_ArgumentRegisters = __PWTB_StackAlloc + 96
 
-        PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, #-176
+        PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, -176
         // Spill callee saved registers
-        PROLOG_SAVE_REG_PAIR   x19, x20, #16
-        PROLOG_SAVE_REG_PAIR   x21, x22, #32
-        PROLOG_SAVE_REG_PAIR   x23, x24, #48
-        PROLOG_SAVE_REG_PAIR   x25, x26, #64
-        PROLOG_SAVE_REG_PAIR   x27, x28, #80
+        PROLOG_SAVE_REG_PAIR   x19, x20, 16
+        PROLOG_SAVE_REG_PAIR   x21, x22, 32
+        PROLOG_SAVE_REG_PAIR   x23, x24, 48
+        PROLOG_SAVE_REG_PAIR   x25, x26, 64
+        PROLOG_SAVE_REG_PAIR   x27, x28, 80
 
         // Allocate space for the rest of the frame
         PROLOG_STACK_ALLOC  __PWTB_StackAlloc
@@ -177,10 +191,19 @@ C_FUNC(\Name\()_End):
 .macro SAVE_ARGUMENT_REGISTERS reg, ofs
 
         stp                    x0, x1, [\reg, #(\ofs)]
+       .cfi_rel_offset x0, \ofs
+       .cfi_rel_offset x1, \ofs + 8
         stp                    x2, x3, [\reg, #(\ofs + 16)]
+       .cfi_rel_offset x2, \ofs + 16
+       .cfi_rel_offset x3, \ofs + 24
         stp                    x4, x5, [\reg, #(\ofs + 32)]
+       .cfi_rel_offset x4, \ofs + 32
+       .cfi_rel_offset x5, \ofs + 40
         stp                    x6, x7, [\reg, #(\ofs + 48)]
+       .cfi_rel_offset x6, \ofs + 48
+       .cfi_rel_offset x7, \ofs + 56
         str                    x8, [\reg, #(\ofs + 64)]
+       .cfi_rel_offset x8, \ofs + 64
 
 .endm
 
@@ -188,28 +211,53 @@ C_FUNC(\Name\()_End):
 .macro SAVE_FLOAT_ARGUMENT_REGISTERS reg, ofs
 
         stp                    d0, d1, [\reg, #(\ofs)]
+       .cfi_rel_offset d0, \ofs + 0
+       .cfi_rel_offset d1, \ofs + 8
         stp                    d2, d3, [\reg, #(\ofs + 16)]
+       .cfi_rel_offset d2, \ofs + 16
+       .cfi_rel_offset d3, \ofs + 24
         stp                    d4, d5, [\reg, #(\ofs + 32)]
+       .cfi_rel_offset d4, \ofs + 32
+       .cfi_rel_offset d5, \ofs + 40
         stp                    d6, d7, [\reg, #(\ofs + 48)]
+       .cfi_rel_offset d6, \ofs + 48
+       .cfi_rel_offset d7, \ofs + 56
 
 .endm
 
 .macro RESTORE_ARGUMENT_REGISTERS reg, ofs
 
         ldp                    x0, x1, [\reg, #(\ofs)]
+        .cfi_restore x0
+        .cfi_restore x1
         ldp                    x2, x3, [\reg, #(\ofs + 16)]
+        .cfi_restore x2
+        .cfi_restore x3
         ldp                    x4, x5, [\reg, #(\ofs + 32)]
+        .cfi_restore x4
+        .cfi_restore x5
         ldp                    x6, x7, [\reg, #(\ofs + 48)]
+        .cfi_restore x6
+        .cfi_restore x7
         ldr                    x8, [\reg, #(\ofs + 64)]
+        .cfi_restore x8
 
 .endm
 
 .macro RESTORE_FLOAT_ARGUMENT_REGISTERS reg, ofs
 
         ldp                    d0, d1, [\reg, #(\ofs)]
+        .cfi_restore d0
+        .cfi_restore d1
         ldp                    d2, d3, [\reg, #(\ofs + 16)]
+        .cfi_restore d2
+        .cfi_restore d3
         ldp                    d4, d5, [\reg, #(\ofs + 32)]
+        .cfi_restore d4
+        .cfi_restore d5
         ldp                    d6, d7, [\reg, #(\ofs + 48)]
+        .cfi_restore d6
+        .cfi_restore d7
 
 .endm
 
@@ -228,12 +276,12 @@ C_FUNC(\Name\()_End):
 
         EPILOG_STACK_FREE                 __PWTB_StackAlloc
 
-        EPILOG_RESTORE_REG_PAIR   x19, x20, #16
-        EPILOG_RESTORE_REG_PAIR   x21, x22, #32
-        EPILOG_RESTORE_REG_PAIR   x23, x24, #48
-        EPILOG_RESTORE_REG_PAIR   x25, x26, #64
-        EPILOG_RESTORE_REG_PAIR   x27, x28, #80
-        EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #176
+        EPILOG_RESTORE_REG_PAIR   x19, x20, 16
+        EPILOG_RESTORE_REG_PAIR   x21, x22, 32
+        EPILOG_RESTORE_REG_PAIR   x23, x24, 48
+        EPILOG_RESTORE_REG_PAIR   x25, x26, 64
+        EPILOG_RESTORE_REG_PAIR   x27, x28, 80
+        EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 176
         ret
 
 .endm
@@ -253,12 +301,12 @@ C_FUNC(\Name\()_End):
 
         EPILOG_STACK_FREE                 __PWTB_StackAlloc
 
-        EPILOG_RESTORE_REG_PAIR   x19, x20, #16
-        EPILOG_RESTORE_REG_PAIR   x21, x22, #32
-        EPILOG_RESTORE_REG_PAIR   x23, x24, #48
-        EPILOG_RESTORE_REG_PAIR   x25, x26, #64
-        EPILOG_RESTORE_REG_PAIR   x27, x28, #80
-        EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #176
+        EPILOG_RESTORE_REG_PAIR   x19, x20, 16
+        EPILOG_RESTORE_REG_PAIR   x21, x22, 32
+        EPILOG_RESTORE_REG_PAIR   x23, x24, 48
+        EPILOG_RESTORE_REG_PAIR   x25, x26, 64
+        EPILOG_RESTORE_REG_PAIR   x27, x28, 80
+        EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 176
 
 .endm
 
@@ -282,7 +330,7 @@ __RedirectionFuncName SETS "|?RedirectedHandledJITCaseFor":CC:"$reason":CC:"@Thr
         IMPORT $__RedirectionFuncName
 
         NESTED_ENTRY $__RedirectionStubFuncName
-        PROLOG_SAVE_REG_PAIR    fp, lr, #-16
+        PROLOG_SAVE_REG_PAIR    fp, lr, -16
         sub sp, sp, #16                          // stack slot for CONTEXT * and padding
 
         //REDIRECTSTUB_SP_OFFSET_CONTEXT is defined in asmconstants.h and is used in GetCONTEXTFromRedirectedStubStackFrame
diff --git a/src/vm/arm64/asmhelpers.S b/src/vm/arm64/asmhelpers.S
index 7c83627..265d74d 100644
--- a/src/vm/arm64/asmhelpers.S
+++ b/src/vm/arm64/asmhelpers.S
@@ -120,7 +120,7 @@ LEAF_END HelperMethodFrameRestoreState, _TEXT
 // The call in ndirect import precode points to this function.
 NESTED_ENTRY NDirectImportThunk, _TEXT, NoHandler
 
-    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-160
+    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -160
     SAVE_ARGUMENT_REGISTERS sp, 16
     SAVE_FLOAT_ARGUMENT_REGISTERS sp, 88
 
@@ -131,7 +131,7 @@ NESTED_ENTRY NDirectImportThunk, _TEXT, NoHandler
     // pop the stack and restore original register state
     RESTORE_FLOAT_ARGUMENT_REGISTERS sp, 88
     RESTORE_ARGUMENT_REGISTERS sp, 16
-    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #160
+    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 160
 
     // If we got back from NDirectImportWorker, the MD has been successfully
     // linked. Proceed to execute the original DLL call.
@@ -368,7 +368,7 @@ LEAF_END JIT_PatchedCodeLast, _TEXT
 NESTED_ENTRY VirtualMethodFixupStub, _TEXT, NoHandler
 
     // Save arguments and return address
-    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-160
+    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -160
     SAVE_ARGUMENT_REGISTERS sp, 16
     SAVE_FLOAT_ARGUMENT_REGISTERS sp, 88
 
@@ -388,7 +388,7 @@ NESTED_ENTRY VirtualMethodFixupStub, _TEXT, NoHandler
     // pop the stack and restore original register state
     RESTORE_ARGUMENT_REGISTERS sp, 16
     RESTORE_FLOAT_ARGUMENT_REGISTERS sp, 88
-    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #160
+    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 160
 
     PATCH_LABEL VirtualMethodFixupPatchLabel
 
@@ -472,7 +472,7 @@ LEAF_END SinglecastDelegateInvokeStub, _TEXT
     NESTED_ENTRY ComCallPreStub, _TEXT, NoHandler
 
     // Save arguments and return address
-    PROLOG_SAVE_REG_PAIR           fp, lr, #-ComCallPreStub_FirstStackAdjust!
+    PROLOG_SAVE_REG_PAIR           fp, lr, -ComCallPreStub_FirstStackAdjust!
     PROLOG_STACK_ALLOC  ComCallPreStub_StackAlloc
 
     SAVE_ARGUMENT_REGISTERS        sp, (16+ComCallPreStub_StackAlloc)
@@ -493,7 +493,7 @@ LEAF_END SinglecastDelegateInvokeStub, _TEXT
     RESTORE_ARGUMENT_REGISTERS        sp, (16+ComCallPreStub_StackAlloc)
 
     EPILOG_STACK_FREE ComCallPreStub_StackAlloc
-    EPILOG_RESTORE_REG_PAIR           fp, lr, #ComCallPreStub_FirstStackAdjust!
+    EPILOG_RESTORE_REG_PAIR           fp, lr, ComCallPreStub_FirstStackAdjust!
 
     // and tailcall to the actual method
     EPILOG_BRANCH_REG x12
@@ -503,7 +503,7 @@ ComCallPreStub_ErrorExit
 
     // pop the stack
     EPILOG_STACK_FREE ComCallPreStub_StackAlloc
-    EPILOG_RESTORE_REG_PAIR           fp, lr, #ComCallPreStub_FirstStackAdjust!
+    EPILOG_RESTORE_REG_PAIR           fp, lr, ComCallPreStub_FirstStackAdjust!
 
     EPILOG_RETURN
 
@@ -522,7 +522,7 @@ ComCallPreStub_ErrorExit
     NESTED_ENTRY GenericComCallStub, _TEXT, NoHandler
 
     // Save arguments and return address
-    PROLOG_SAVE_REG_PAIR           fp, lr, #-GenericComCallStub_FirstStackAdjust!
+    PROLOG_SAVE_REG_PAIR           fp, lr, -GenericComCallStub_FirstStackAdjust!
     PROLOG_STACK_ALLOC  GenericComCallStub_StackAlloc
 
     SAVE_ARGUMENT_REGISTERS        sp, (16+GenericComCallStub_StackAlloc)
@@ -534,7 +534,7 @@ ComCallPreStub_ErrorExit
 
     // pop the stack
     EPILOG_STACK_FREE GenericComCallStub_StackAlloc
-    EPILOG_RESTORE_REG_PAIR           fp, lr, #GenericComCallStub_FirstStackAdjust!
+    EPILOG_RESTORE_REG_PAIR           fp, lr, GenericComCallStub_FirstStackAdjust!
 
     EPILOG_RETURN
 
@@ -555,7 +555,7 @@ ComCallPreStub_ErrorExit
 //
     NESTED_ENTRY COMToCLRDispatchHelper, _TEXT,CallDescrWorkerUnwindFrameChainHandler
 
-    PROLOG_SAVE_REG_PAIR           fp, lr, #-16!
+    PROLOG_SAVE_REG_PAIR           fp, lr, -16!
 
     cbz x0, COMToCLRDispatchHelper_RegSetup
 
@@ -586,7 +586,7 @@ COMToCLRDispatchHelper_RegSetup
     blr lr
 
     EPILOG_STACK_RESTORE
-    EPILOG_RESTORE_REG_PAIR           fp, lr, #16!
+    EPILOG_RESTORE_REG_PAIR           fp, lr, 16!
     EPILOG_RETURN
 
     NESTED_END COMToCLRDispatchHelper, _TEXT
@@ -598,7 +598,7 @@ COMToCLRDispatchHelper_RegSetup
 NESTED_ENTRY TheUMEntryPrestub, _TEXT, UnhandledExceptionHandlerUnix
 
     // Save arguments and return address
-    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-160
+    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -160
     SAVE_ARGUMENT_REGISTERS sp, 16
     SAVE_FLOAT_ARGUMENT_REGISTERS sp, 88
 
@@ -611,7 +611,7 @@ NESTED_ENTRY TheUMEntryPrestub, _TEXT, UnhandledExceptionHandlerUnix
     // pop the stack and restore original register state
     RESTORE_ARGUMENT_REGISTERS sp, 16
     RESTORE_FLOAT_ARGUMENT_REGISTERS sp, 88
-    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #160
+    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 160
 
     // and tailcall to the actual method
     EPILOG_BRANCH_REG x12
@@ -624,9 +624,9 @@ NESTED_END TheUMEntryPrestub, _TEXT
 NESTED_ENTRY UMThunkStub, _TEXT, UnhandledExceptionHandlerUnix
 
     // Save arguments and return address
-    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-112 // 72 for regArgs, 8 for x19 & 8 for x12
+    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -112 // 72 for regArgs, 8 for x19 & 8 for x12
     // save callee saved reg x19. x19 is used in the method to store thread*
-    PROLOG_SAVE_REG x19, #96
+    PROLOG_SAVE_REG x19, 96
 
     SAVE_ARGUMENT_REGISTERS sp, 16
 
@@ -709,8 +709,8 @@ LOCAL_LABEL(UMThunkStub_PostCall):
     str w4, [x19, #Thread__m_fPreemptiveGCDisabled]
 
     EPILOG_STACK_RESTORE
-    EPILOG_RESTORE_REG x19, #96
-    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr, #112
+    EPILOG_RESTORE_REG x19, 96
+    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr, 112
 
     EPILOG_RETURN
 
@@ -768,8 +768,8 @@ NESTED_END UMThunkStub, _TEXT
 
 NESTED_ENTRY UM2MThunk_WrapperHelper, _TEXT, NoHandler
 
-    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-32
-    PROLOG_SAVE_REG  x19, #16
+    PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -32
+    PROLOG_SAVE_REG  x19, 16
 
 
     // save pThunkArgs in non-volatile reg. It is required after return from call to ILStub
@@ -832,8 +832,8 @@ LOCAL_LABEL(UM2MThunk_WrapperHelper_RegArgumentsSetup):
     SAVE_FLOAT_ARGUMENT_REGISTERS x19, -1 * (SIZEOF__FloatArgumentRegisters + 16)
 
     EPILOG_STACK_RESTORE
-    EPILOG_RESTORE_REG  x19, #16
-    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #32
+    EPILOG_RESTORE_REG  x19, 16
+    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 32
     EPILOG_RETURN
 
 NESTED_END UM2MThunk_WrapperHelper, _TEXT
@@ -842,14 +842,14 @@ NESTED_END UM2MThunk_WrapperHelper, _TEXT
 #ifdef FEATURE_HIJACK
 // ------------------------------------------------------------------
 // Hijack function for functions which return a scalar type or a struct (value type)
-NESTED_ENTRY OnHijackTripThread, _TEXT, NoHandler
-    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, #-144
+    NESTED_ENTRY OnHijackTripThread, _TEXT, NoHandler
+    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, -144
     // Spill callee saved registers
-    PROLOG_SAVE_REG_PAIR   x19, x20, #16
-    PROLOG_SAVE_REG_PAIR   x21, x22, #32
-    PROLOG_SAVE_REG_PAIR   x23, x24, #48
-    PROLOG_SAVE_REG_PAIR   x25, x26, #64
-    PROLOG_SAVE_REG_PAIR   x27, x28, #80
+    PROLOG_SAVE_REG_PAIR   x19, x20, 16
+    PROLOG_SAVE_REG_PAIR   x21, x22, 32
+    PROLOG_SAVE_REG_PAIR   x23, x24, 48
+    PROLOG_SAVE_REG_PAIR   x25, x26, 64
+    PROLOG_SAVE_REG_PAIR   x27, x28, 80
 
     // save any integral return value(s)
     stp x0, x1, [sp, #96]
@@ -868,14 +868,14 @@ NESTED_ENTRY OnHijackTripThread, _TEXT, NoHandler
     ldp d0, d1, [sp, #112]
     ldp d2, d3, [sp, #128]
 
-    EPILOG_RESTORE_REG_PAIR   x19, x20, #16
-    EPILOG_RESTORE_REG_PAIR   x21, x22, #32
-    EPILOG_RESTORE_REG_PAIR   x23, x24, #48
-    EPILOG_RESTORE_REG_PAIR   x25, x26, #64
-    EPILOG_RESTORE_REG_PAIR   x27, x28, #80
-    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr,   #144
+    EPILOG_RESTORE_REG_PAIR   x19, x20, 16
+    EPILOG_RESTORE_REG_PAIR   x21, x22, 32
+    EPILOG_RESTORE_REG_PAIR   x23, x24, 48
+    EPILOG_RESTORE_REG_PAIR   x25, x26, 64
+    EPILOG_RESTORE_REG_PAIR   x27, x28, 80
+    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr,   144
     EPILOG_RETURN
-NESTED_END OnHijackTripThread, _TEXT
+    NESTED_END OnHijackTripThread, _TEXT
 
 #endif // FEATURE_HIJACK
 
@@ -906,9 +906,9 @@ NESTED_ENTRY CallEHFunclet, _TEXT, NoHandler
     // sp in fp. If sp is saved in fp in prolog then it is not expected that fp can change in the body
     // of method. However, this method needs to be able to change fp before calling funclet.
     // This is required to access locals in funclet.
-    PROLOG_SAVE_REG_PAIR_INDEXED x19,x20, #-16
-    PROLOG_SAVE_REG   fp, #0
-    PROLOG_SAVE_REG   lr, #8
+    PROLOG_SAVE_REG_PAIR_INDEXED x19,x20, -16
+    PROLOG_SAVE_REG   fp, 0
+    PROLOG_SAVE_REG   lr, 8
 
     // On entry:
     //
@@ -927,7 +927,7 @@ NESTED_ENTRY CallEHFunclet, _TEXT, NoHandler
     blr x1
     nop
 
-    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr, #16
+    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr, 16
     EPILOG_RETURN
 
 NESTED_END CallEHFunclet, _TEXT
@@ -936,7 +936,7 @@ NESTED_END CallEHFunclet, _TEXT
 // frame pointer for accessing the locals in the parent method.
 NESTED_ENTRY CallEHFilterFunclet, _TEXT, NoHandler
 
-    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, #-16
+    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, -16
 
     // On entry:
     //
@@ -950,7 +950,7 @@ NESTED_ENTRY CallEHFilterFunclet, _TEXT, NoHandler
     // Invoke the filter funclet
     blr x2
 
-    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr,   #16
+    EPILOG_RESTORE_REG_PAIR_INDEXED   fp, lr,   16
     EPILOG_RETURN
 
 NESTED_END CallEHFilterFunclet, _TEXT
@@ -969,7 +969,7 @@ NESTED_END CallEHFilterFunclet, _TEXT
         // IN: lr: original IP before redirect
         //
 
-        PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, #-16
+        PROLOG_SAVE_REG_PAIR_INDEXED fp, lr, -16
         PROLOG_STACK_ALLOC  FaultingExceptionFrame_StackAlloc
 
         // At this point, the stack maybe misaligned if the thread abort was asynchronously
@@ -1007,7 +1007,7 @@ NESTED_END CallEHFilterFunclet, _TEXT
 //
 
 NESTED_ENTRY NakedThrowHelper2, _TEXT ,FixContextHandler
-    PROLOG_SAVE_REG_PAIR_INDEXED fp,lr, #-16
+    PROLOG_SAVE_REG_PAIR_INDEXED fp,lr, -16
 
     // On entry:
     //
diff --git a/src/vm/arm64/calldescrworkerarm64.S b/src/vm/arm64/calldescrworkerarm64.S
index 7481fc7..90b7639 100644
--- a/src/vm/arm64/calldescrworkerarm64.S
+++ b/src/vm/arm64/calldescrworkerarm64.S
@@ -12,8 +12,8 @@
 //void CallDescrWorkerInternal(CallDescrData * pCallDescrData);
 
 NESTED_ENTRY CallDescrWorkerInternal, _TEXT, UnhandledExceptionHandlerUnix
-    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, #-32
-    PROLOG_SAVE_REG    x19, #16   //the stack slot at sp+24 is empty for 16 byte alligment
+    PROLOG_SAVE_REG_PAIR_INDEXED   fp, lr, -32
+    PROLOG_SAVE_REG    x19, 16   //the stack slot at sp+24 is empty for 16 byte alligment
 
     mov     x19, x0 // save pCallDescrData in x19
 
@@ -122,7 +122,7 @@ LOCAL_LABEL(ReturnDone):
 #endif
 
     EPILOG_STACK_RESTORE
-    EPILOG_RESTORE_REG      x19, #16    //the stack slot at sp+24 is empty for 16 byte alligment
-    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, #32
+    EPILOG_RESTORE_REG      x19, 16    //the stack slot at sp+24 is empty for 16 byte alligment
+    EPILOG_RESTORE_REG_PAIR_INDEXED fp, lr, 32
     EPILOG_RETURN
 NESTED_END CallDescrWorkerInternal, _TEXT
-- 
2.7.4

