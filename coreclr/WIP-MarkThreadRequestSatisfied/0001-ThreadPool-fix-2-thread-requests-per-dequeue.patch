From eb8b5f14d398b5e6d97ef209cfb0868d099b24ca Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Wed, 16 Aug 2017 18:34:10 -0400
Subject: [PATCH] ThreadPool fix 2 thread requests per dequeue

Only request an additional thread on dequeue if
enqueue request was supressed
---
 src/mscorlib/src/System/Threading/ThreadPool.cs | 44 ++++++++++++++++++-------
 1 file changed, 33 insertions(+), 11 deletions(-)

diff --git a/src/mscorlib/src/System/Threading/ThreadPool.cs b/src/mscorlib/src/System/Threading/ThreadPool.cs
index b64a5d3..00b4936 100644
--- a/src/mscorlib/src/System/Threading/ThreadPool.cs
+++ b/src/mscorlib/src/System/Threading/ThreadPool.cs
@@ -415,7 +415,7 @@ namespace System.Threading
             }
         }
 
-        internal void MarkThreadRequestSatisfied()
+        internal void MarkThreadRequestSatisfied(bool dequeSuccessful)
         {
             //
             // The VM has called us, so one of our outstanding thread requests has been satisfied.
@@ -433,6 +433,13 @@ namespace System.Threading
                 }
                 count = prev;
             }
+
+            if (dequeSuccessful && (count == ThreadPoolGlobals.processorCount))
+            {
+                // If we gated threads due to too many outstanding requests and queue was not empty
+                // Request another thread.
+                EnsureThreadRequested();
+            }
         }
 
         public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal)
@@ -539,15 +546,7 @@ namespace System.Threading
             //
             int quantumStartTime = Environment.TickCount;
 
-            //
-            // Update our records to indicate that an outstanding request for a thread has now been fulfilled.
-            // From this point on, we are responsible for requesting another thread if we stop working for any
-            // reason, and we believe there might still be work in the queue.
-            //
-            // Note that if this thread is aborted before we get a chance to request another one, the VM will
-            // record a thread request on our behalf.  So we don't need to worry about getting aborted right here.
-            //
-            workQueue.MarkThreadRequestSatisfied();
+            bool markThreadRequestSatisfied = true;
 
             // Has the desire for logging changed since the last time we entered?
             workQueue.loggingEnabled = FrameworkEventSource.Log.IsEnabled(EventLevel.Verbose, FrameworkEventSource.Keywords.ThreadPool | FrameworkEventSource.Keywords.ThreadTransfer);
@@ -596,7 +595,21 @@ namespace System.Threading
                     // If we found work, there may be more work.  Ask for another thread so that the other work can be processed
                     // in parallel.  Note that this will only ask for a max of #procs threads, so it's safe to call it for every dequeue.
                     //
-                    workQueue.EnsureThreadRequested();
+                    if (markThreadRequestSatisfied)
+                    {
+                        //
+                        // Update our records to indicate that an outstanding request for a thread has now been fulfilled
+                        // and that an item was successfully dispatched and another thread may be needed
+                        //
+                        // From this point on, we are responsible for requesting another thread if we stop working for any
+                        // reason, and we believe there might still be work in the queue.
+                        //
+                        // Note that if this thread is aborted before we get a chance to request another one, the VM will
+                        // record a thread request on our behalf.  So we don't need to worry about getting aborted right here.
+                        //
+                        workQueue.MarkThreadRequestSatisfied(true);
+                        markThreadRequestSatisfied = false;
+                    }
 
                     //
                     // Execute the workitem outside of any finally blocks, so that it can be aborted if needed.
@@ -651,6 +664,15 @@ namespace System.Threading
             }
             finally
             {
+                if (markThreadRequestSatisfied)
+                {
+                    //
+                    // Update our records to indicate that an outstanding request for a thread has now been fulfilled
+                    // and that an item was not successfully dispatched.  We will request thread below if needed
+                    //
+                    workQueue.MarkThreadRequestSatisfied(false);
+                }
+
                 //
                 // If we are exiting for any reason other than that the queue is definitely empty, ask for another
                 // thread to pick up where we left off.
-- 
2.7.4

