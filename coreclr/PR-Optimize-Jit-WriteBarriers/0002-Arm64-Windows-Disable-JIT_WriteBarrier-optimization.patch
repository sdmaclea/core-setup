From 2de13cfabfe6ad43cd8e00f6a0884e546c7516f1 Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Fri, 25 Aug 2017 14:49:58 -0400
Subject: [PATCH] [Arm64/Windows] Disable JIT_WriteBarrier optimization

---
 src/vm/arm64/asmhelpers.asm | 201 +++++++++-----------------------------------
 src/vm/arm64/stubs.cpp      |   4 +
 2 files changed, 44 insertions(+), 161 deletions(-)

diff --git a/src/vm/arm64/asmhelpers.asm b/src/vm/arm64/asmhelpers.asm
index fb968e9..edd40f7 100644
--- a/src/vm/arm64/asmhelpers.asm
+++ b/src/vm/arm64/asmhelpers.asm
@@ -52,14 +52,6 @@
     IMPORT $g_GCShadowEnd
 #endif // WRITE_BARRIER_CHECK
 
-#ifdef FEATURE_MANUALLY_MANAGED_CARD_BUNDLES
-    IMPORT g_card_bundle_table
-#endif
-
-#ifdef FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
-    IMPORT g_sw_ww_table
-#endif
-
     IMPORT JIT_GetSharedNonGCStaticBase_Helper
     IMPORT JIT_GetSharedGCStaticBase_Helper
 
@@ -277,106 +269,6 @@ ThePreStubPatchLabel
 
     MEND
 
-; ------------------------------------------------------------------
-; Start of the writeable code region
-    LEAF_ENTRY JIT_PatchedCodeStart
-        ret      lr
-    LEAF_END
-
-; void JIT_UpdateWriteBarrierState(bool skipEphemeralCheck)
-;
-; Update shadow copies of the various state info required for barrier
-;
-; State info is contained in a literal pool at the end of the function
-; Placed in text section so that it is close enough to use ldr literal and still
-; be relocatable. Eliminates need for PREPARE_EXTERNAL_VAR in hot code.
-;
-; Align and group state info together so it fits in a single cache line
-; and each entry can be written atomically
-;
-    WRITE_BARRIER_ENTRY JIT_UpdateWriteBarrierState
-        PROLOG_SAVE_REG_PAIR   fp, lr, #-16!
-
-        ; x0-x7 will contain intended new state
-        ; x8 will preserve skipEphemeralCheck
-        ; x12 will be used for pointers
-
-        mov      x8, x0
-
-        adrp     x12, g_card_table
-        ldr      x0, [x12, g_card_table]
-
-#ifdef FEATURE_MANUALLY_MANAGED_CARD_BUNDLES
-        adrp     x12, g_card_bundle_table
-        ldr      x1, [x12, g_card_bundle_table]
-#endif
-
-#ifdef WRITE_BARRIER_CHECK
-        adrp     x12, $g_GCShadow
-        ldr      x2, [x12, $g_GCShadow]
-#endif
-
-#ifdef FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
-        adrp     x12, g_sw_ww_table
-        ldr      x3, [x12, g_sw_ww_table]
-#endif
-
-        adrp     x12, g_ephemeral_low
-        ldr      x4, [x12, g_ephemeral_low]
-
-        adrp     x12, g_ephemeral_high
-        ldr      x5, [x12, g_ephemeral_high]
-
-        cbz      x8, EphemeralCheckEnabled
-        movz     x4, #0
-        movn     x5, #0
-EphemeralCheckEnabled
-
-        adrp     x12, g_lowest_address
-        ldr      x6, [x12, g_lowest_address]
-
-        adrp     x12, g_highest_address
-        ldr      x7, [x12, g_highest_address]
-
-        ; Update wbs state
-        adr  x12, wbs_begin
-
-        stp  x0, x1, [x12], 16
-        stp  x2, x3, [x12], 16
-        stp  x4, x5, [x12], 16
-        stp  x6, x7, [x12], 16
-
-        EPILOG_RESTORE_REG_PAIR fp, lr, 16
-        EPILOG_RETURN
-
-        ; Begin patchable literal pool
-        ALIGN 64  ; Align to power of two at least as big as patchable literal pool so that it fits optimally in cache line
-wbs_begin
-wbs_card_table
-        DCQ 0
-wbs_card_bundle_table
-        DCQ 0
-wbs_GCShadow
-        DCQ 0
-wbs_sw_ww_table
-        DCQ 0
-wbs_ephemeral_low
-        DCQ 0
-wbs_ephemeral_high
-        DCQ 0
-wbs_lowest_address
-        DCQ 0
-wbs_highest_address
-        DCQ 0
-    WRITE_BARRIER_END JIT_UpdateWriteBarrierState
-
-
-; ------------------------------------------------------------------
-; End of the writeable code region
-    LEAF_ENTRY JIT_PatchedCodeLast
-        ret      lr
-    LEAF_END
-
 ; void JIT_ByRefWriteBarrier
 ; On entry:
 ;   x13  : the source address (points to object reference to write)
@@ -387,7 +279,6 @@ wbs_highest_address
 ;   x13  : incremented by 8
 ;   x14  : incremented by 8
 ;   x15  : trashed
-;   x17  : trashed (ip1) if FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
 ;
     WRITE_BARRIER_ENTRY JIT_ByRefWriteBarrier
 
@@ -407,14 +298,16 @@ wbs_highest_address
 ;   x12  : trashed
 ;   x14  : incremented by 8
 ;   x15  : trashed
-;   x17  : trashed (ip1) if FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
 ;
     WRITE_BARRIER_ENTRY JIT_CheckedWriteBarrier
-        ldr      x12,  wbs_lowest_address
+        adrp     x12,  g_lowest_address
+        ldr      x12,  [x12, g_lowest_address]
         cmp      x14,  x12
+        blt      NotInHeap
 
-        ldr      x12, wbs_highest_address
-        ccmpge   x14, x12, #0x0
+        adrp      x12, g_highest_address 
+        ldr      x12, [x12, g_highest_address] 
+        cmp      x14, x12
         blt      JIT_WriteBarrier
 
 NotInHeap
@@ -431,7 +324,6 @@ NotInHeap
 ;   x12  : trashed
 ;   x14  : incremented by 8
 ;   x15  : trashed
-;   x17  : trashed (ip1) if FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
 ;
     WRITE_BARRIER_ENTRY JIT_WriteBarrier
         stlr     x15, [x14]
@@ -439,24 +331,23 @@ NotInHeap
 #ifdef WRITE_BARRIER_CHECK
         ; Update GC Shadow Heap  
 
-        ; Do not perform the work if g_GCShadow is 0
-        ldr      x12, wbs_GCShadow
-        cbz      x12, ShadowUpdateDisabled
-
-        ; need temporary register. Save before using.
-        str      x13, [sp, #-16]!
+        ; need temporary registers. Save them before using. 
+        stp      x12, x13, [sp, #-16]!
 
         ; Compute address of shadow heap location:
         ;   pShadow = $g_GCShadow + (x14 - g_lowest_address)
-        ldr      x13, wbs_lowest_address
-        sub      x13, x14, x13
+        adrp     x12, g_lowest_address
+        ldr      x12, [x12, g_lowest_address]
+        sub      x12, x14, x12
+        adrp     x13, $g_GCShadow
+        ldr      x13, [x13, $g_GCShadow]
         add      x12, x13, x12
 
         ; if (pShadow >= $g_GCShadowEnd) goto end
         adrp     x13, $g_GCShadowEnd
         ldr      x13, [x13, $g_GCShadowEnd]
         cmp      x12, x13
-        bhs      ShadowUpdateEnd
+        bhs      shadowupdateend
 
         ; *pShadow = x15
         str      x15, [x12]
@@ -468,44 +359,34 @@ NotInHeap
         ; if ([x14] == x15) goto end
         ldr      x13, [x14]
         cmp      x13, x15
-        beq      ShadowUpdateEnd
+        beq shadowupdateend
 
         ; *pShadow = INVALIDGCVALUE (0xcccccccd)        
-        movz     x13, #0xcccd
+        mov      x13, #0
+        movk     x13, #0xcccd
         movk     x13, #0xcccc, LSL #16
         str      x13, [x12]
 
-ShadowUpdateEnd
-        ldr      x13, [sp], #16
-ShadowUpdateDisabled
-#endif
-
-#ifdef FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP
-        ; Update the write watch table if necessary
-        ldr      x12, wbs_sw_ww_table
-        cbz      x12, CheckCardTable
-        add      x12, x12, x14, lsr #0xc  ; SoftwareWriteWatch::AddressToTableByteIndexShift
-        ldrb     w17, [x12]
-        cbnz     x17, CheckCardTable
-        mov      w17, #0xFF
-        strb     w17, [x12]
+shadowupdateend
+        ldp      x12, x13, [sp],#16        
 #endif
 
-CheckCardTable
         ; Branch to Exit if the reference is not in the Gen0 heap
         ;
-        ldr      x12,  wbs_ephemeral_low
-        cbz      x12,  SkipEphemeralCheck
+        adrp     x12,  g_ephemeral_low
+        ldr      x12,  [x12, g_ephemeral_low]
         cmp      x15,  x12
+        blt      Exit
 
-        ldr      x12,  wbs_ephemeral_high
-        ccmpge   x15,  x12, #0x0
+        adrp     x12, g_ephemeral_high 
+        ldr      x12, [x12, g_ephemeral_high]
+        cmp      x15,  x12
         bgt      Exit
 
-SkipEphemeralCheck
         ; Check if we need to update the card table        
-        ldr      x12, wbs_card_table
-        add      x15, x12, x14, lsr #11
+        adrp     x12, g_card_table
+        ldr      x12, [x12, g_card_table]
+        add      x15,  x12, x14 lsr #11
         ldrb     w12, [x15]
         cmp      x12, 0xFF
         beq      Exit
@@ -513,25 +394,23 @@ SkipEphemeralCheck
 UpdateCardTable
         mov      x12, 0xFF 
         strb     w12, [x15]
-
-#ifdef FEATURE_MANUALLY_MANAGED_CARD_BUNDLES
-        ; Check if we need to update the card bundle table
-        ldr      x12, wbs_card_bundle_table
-        add      x15, x12, x14, lsr #21
-        ldrb     w12, [x15]
-        cmp      x12, 0xFF
-        beq      Exit
-
-UpdateCardBundle
-        mov      x12, 0xFF
-        strb     w12, [x15]
-#endif
-
 Exit
         add      x14, x14, 8
         ret      lr          
     WRITE_BARRIER_END JIT_WriteBarrier
 
+; ------------------------------------------------------------------
+; Start of the writeable code region
+    LEAF_ENTRY JIT_PatchedCodeStart
+        ret      lr
+    LEAF_END
+
+; ------------------------------------------------------------------
+; End of the writeable code region
+    LEAF_ENTRY JIT_PatchedCodeLast
+        ret      lr
+    LEAF_END
+
 ;------------------------------------------------
 ; VirtualMethodFixupStub
 ;
diff --git a/src/vm/arm64/stubs.cpp b/src/vm/arm64/stubs.cpp
index 52d179b..7e7c2e8 100644
--- a/src/vm/arm64/stubs.cpp
+++ b/src/vm/arm64/stubs.cpp
@@ -1124,6 +1124,10 @@ void InitJITHelpers1()
 
     JIT_UpdateWriteBarrierState(GCHeapUtilities::IsServerHeap());
 }
+#ifndef FEATURE_PAL // TODO-ARM64-WINDOWS #13592
+EXTERN_C void JIT_UpdateWriteBarrierState(bool) {}
+#endif
+
 #else
 EXTERN_C void JIT_UpdateWriteBarrierState(bool) {}
 #endif // !defined(DACCESS_COMPILE) && !defined(CROSSGEN_COMPILE)
-- 
2.7.4

