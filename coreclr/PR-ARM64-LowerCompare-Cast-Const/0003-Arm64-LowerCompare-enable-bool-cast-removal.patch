From 783a9e1b2f58869fe5a4992910fadda51c01dd79 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Fri, 8 Sep 2017 15:48:18 -0400
Subject: [PATCH] [Arm64] LowerCompare enable bool cast removal

---
 src/jit/lower.cpp | 20 ++++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/src/jit/lower.cpp b/src/jit/lower.cpp
index 3c1c6d6..98bc7b2 100644
--- a/src/jit/lower.cpp
+++ b/src/jit/lower.cpp
@@ -2410,6 +2410,11 @@ void Lowering::LowerCompare(GenTree* cmp)
 
             op2->gtType = op1Type;
         }
+#else
+        if (false)
+        {
+        }
+#endif
         else if (op1->OperIs(GT_CAST) && !op1->gtOverflow())
         {
             GenTreeCast* cast       = op1->AsCast();
@@ -2428,8 +2433,13 @@ void Lowering::LowerCompare(GenTree* cmp)
                 // situations. In particular this include CALL, sometimes the JIT unnecessarilly widens
                 // the result of bool returning calls.
                 //
+                bool removeCast =
+#ifdef _TARGET_ARM64_
+                    (op2Value == 0) &&
+#endif
+                    (castOp->OperIs(GT_CALL, GT_LCL_VAR) || castOp->OperIsLogical() || IsContainableMemoryOp(castOp));
 
-                if (castOp->OperIs(GT_CALL, GT_LCL_VAR) || castOp->OperIsLogical() || IsContainableMemoryOp(castOp))
+                if (removeCast)
                 {
                     assert(!castOp->gtOverflowEx()); // Must not be an overflow checking operation
 
@@ -2451,13 +2461,15 @@ void Lowering::LowerCompare(GenTree* cmp)
                     cmp->gtOp.gtOp1 = castOp;
                     op2->gtType     = castToType;
 
+#ifdef _TARGET_ARM64_
+                    cmp->SetOperRaw(cmp->OperIs(GT_EQ) ? GT_TEST_EQ : GT_TEST_NE);
+                    op2->SetIconValue(0xff);
+#endif
                     BlockRange().Remove(cast);
                 }
             }
         }
-        else
-#endif
-        if (op1->OperIs(GT_AND) && cmp->OperIs(GT_EQ, GT_NE))
+        else if (op1->OperIs(GT_AND) && cmp->OperIs(GT_EQ, GT_NE))
         {
             //
             // Transform ((x AND y) EQ|NE 0) into (x TEST_EQ|TEST_NE y) when possible.
-- 
2.7.4

