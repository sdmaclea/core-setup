From 31fe0baf1cf52a210bd797922664f93d0f77d77f Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Fri, 8 Sep 2017 15:48:18 -0400
Subject: [PATCH] [Arm64] LowerCompare enable bool cast removal

---
 src/jit/lower.cpp | 25 ++++++++++++++++++++-----
 1 file changed, 20 insertions(+), 5 deletions(-)

diff --git a/src/jit/lower.cpp b/src/jit/lower.cpp
index 86c1c5a..fab8754 100644
--- a/src/jit/lower.cpp
+++ b/src/jit/lower.cpp
@@ -2410,7 +2410,9 @@ void Lowering::LowerCompare(GenTree* cmp)
 
             op2->gtType = op1Type;
         }
-        else if (op1->OperIs(GT_CAST) && !op1->gtOverflow())
+        else
+#endif
+            if (op1->OperIs(GT_CAST) && !op1->gtOverflow())
         {
             GenTreeCast* cast       = op1->AsCast();
             var_types    castToType = cast->CastToType();
@@ -2428,12 +2430,27 @@ void Lowering::LowerCompare(GenTree* cmp)
                 // situations. In particular this include CALL, sometimes the JIT unnecessarilly widens
                 // the result of bool returning calls.
                 //
+                bool removeCast =
+#ifdef _TARGET_ARM64_
+                    (op2Value <= ((castToType == TYP_BOOL) ? 1 : 0)) && cmp->OperIs(GT_EQ, GT_NE, GT_GT) &&
+#endif
+                    (castOp->OperIs(GT_CALL, GT_LCL_VAR) || castOp->OperIsLogical() || IsContainableMemoryOp(castOp));
 
-                if (castOp->OperIs(GT_CALL, GT_LCL_VAR) || castOp->OperIsLogical() || IsContainableMemoryOp(castOp))
+                if (removeCast)
                 {
                     assert(!castOp->gtOverflowEx()); // Must not be an overflow checking operation
 
+#ifdef _TARGET_ARM64_
+                    bool cmpEq = cmp->OperIs(GT_EQ);
+
+                    if (op2Value != 0)
+                        cmpEq = !cmpEq;
+
+                    cmp->SetOperRaw(cmpEq ? GT_TEST_EQ : GT_TEST_NE);
+                    op2->SetIconValue((op2Value == 0) ? 0xff : 0x1);
+#else
                     castOp->gtType = castToType;
+#endif
                     // If we have any contained memory ops on castOp, they must now not be contained.
                     if (castOp->OperIsLogical())
                     {
@@ -2455,9 +2472,7 @@ void Lowering::LowerCompare(GenTree* cmp)
                 }
             }
         }
-        else
-#endif
-            if (op1->OperIs(GT_AND) && cmp->OperIs(GT_EQ, GT_NE))
+        else if (op1->OperIs(GT_AND) && cmp->OperIs(GT_EQ, GT_NE))
         {
             //
             // Transform ((x AND y) EQ|NE 0) into (x TEST_EQ|TEST_NE y) when possible.
-- 
2.7.4

