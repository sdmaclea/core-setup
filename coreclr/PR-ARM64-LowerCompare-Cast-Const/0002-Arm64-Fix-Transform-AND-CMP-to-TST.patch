From 030c3708f90b882c40b751b5bb79d9a9f10503c5 Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Tue, 5 Sep 2017 16:18:26 -0400
Subject: [PATCH] [Arm64] Fix Transform AND-CMP to TST

---
 src/jit/codegenarmarch.cpp | 2 ++
 src/jit/codegencommon.cpp  | 6 ++++++
 src/jit/lower.cpp          | 4 +++-
 src/jit/lowerarmarch.cpp   | 4 ++--
 src/jit/lsraarmarch.cpp    | 2 +-
 5 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/jit/codegenarmarch.cpp b/src/jit/codegenarmarch.cpp
index e2342ce..f9081e8 100644
--- a/src/jit/codegenarmarch.cpp
+++ b/src/jit/codegenarmarch.cpp
@@ -235,8 +235,10 @@ void CodeGen::genCodeForTreeNode(GenTreePtr treeNode)
         case GT_GE:
         case GT_GT:
         case GT_CMP:
+#ifdef _TARGET_ARM64_
         case GT_TEST_EQ:
         case GT_TEST_NE:
+#endif // _TARGET_ARM64_
             genCodeForCompare(treeNode->AsOp());
             break;
 
diff --git a/src/jit/codegencommon.cpp b/src/jit/codegencommon.cpp
index f3c67f6..07a5241 100644
--- a/src/jit/codegencommon.cpp
+++ b/src/jit/codegencommon.cpp
@@ -2511,9 +2511,11 @@ emitJumpKind CodeGen::genJumpKindForOper(genTreeOps cmp, CompareKind compareKind
         EJ_le,   // GT_LE
         EJ_ge,   // GT_GE
         EJ_gt,   // GT_GT
+#if defined(_TARGET_ARM64_)
         EJ_eq,   // GT_TEST_EQ
         EJ_ne,   // GT_TEST_NE
 #endif
+#endif
     };
 
     const static BYTE genJCCinsUnsigned[] = /* unsigned comparison */
@@ -2536,9 +2538,11 @@ emitJumpKind CodeGen::genJumpKindForOper(genTreeOps cmp, CompareKind compareKind
         EJ_ls,   // GT_LE
         EJ_hs,   // GT_GE
         EJ_hi,   // GT_GT
+#if defined(_TARGET_ARM64_)
         EJ_eq,   // GT_TEST_EQ
         EJ_ne,   // GT_TEST_NE
 #endif
+#endif
     };
 
     const static BYTE genJCCinsLogical[] = /* logical operation */
@@ -2561,9 +2565,11 @@ emitJumpKind CodeGen::genJumpKindForOper(genTreeOps cmp, CompareKind compareKind
         EJ_NONE, // GT_LE
         EJ_pl,   // GT_GE   (N == 0)
         EJ_NONE, // GT_GT
+#if defined(_TARGET_ARM64_)
         EJ_eq,   // GT_TEST_EQ
         EJ_ne,   // GT_TEST_NE
 #endif
+#endif
     };
 
 #if defined(_TARGET_XARCH_)
diff --git a/src/jit/lower.cpp b/src/jit/lower.cpp
index 9baa08a..3c1c6d6 100644
--- a/src/jit/lower.cpp
+++ b/src/jit/lower.cpp
@@ -2133,7 +2133,7 @@ GenTree* Lowering::LowerTailCallViaHelper(GenTreeCall* call, GenTree* callTarget
 //    - Decomposes long comparisons that produce a value (X86 specific).
 //    - Ensures that we don't have a mix of int/long operands (XARCH specific).
 //    - Narrow operands to enable memory operand containment (XARCH specific).
-//    - Transform cmp(and(x, y), 0) into test(x, y) (XARCH specific but could
+//    - Transform cmp(and(x, y), 0) into test(x, y) (XARCH/Arm64 specific but could
 //      be used for ARM as well if support for GT_TEST_EQ/GT_TEST_NE is added).
 
 void Lowering::LowerCompare(GenTree* cmp)
@@ -2390,6 +2390,7 @@ void Lowering::LowerCompare(GenTree* cmp)
     }
 #endif // _TARGET_AMD64_
 
+#if defined(_TARGET_XARCH_) || defined(_TARGET_ARM64_)
     if (cmp->gtGetOp2()->IsIntegralConst())
     {
         GenTree*       op1      = cmp->gtGetOp1();
@@ -2528,6 +2529,7 @@ void Lowering::LowerCompare(GenTree* cmp)
             }
         }
     }
+#endif // defined(_TARGET_XARCH_) || defined(_TARGET_ARM64_)
 
 #ifdef _TARGET_XARCH_
     if (cmp->gtGetOp1()->TypeGet() == cmp->gtGetOp2()->TypeGet())
diff --git a/src/jit/lowerarmarch.cpp b/src/jit/lowerarmarch.cpp
index 5720393..64c7886 100644
--- a/src/jit/lowerarmarch.cpp
+++ b/src/jit/lowerarmarch.cpp
@@ -121,13 +121,13 @@ bool Lowering::IsContainableImmed(GenTree* parentNode, GenTree* childNode)
             case GT_LE:
             case GT_GE:
             case GT_GT:
-            case GT_TEST_EQ:
-            case GT_TEST_NE:
                 return emitter::emitIns_valid_imm_for_cmp(immVal, size);
                 break;
             case GT_AND:
             case GT_OR:
             case GT_XOR:
+            case GT_TEST_EQ:
+            case GT_TEST_NE:
                 return emitter::emitIns_valid_imm_for_alu(immVal, size);
                 break;
 #elif defined(_TARGET_ARM_)
diff --git a/src/jit/lsraarmarch.cpp b/src/jit/lsraarmarch.cpp
index c6abf08..ac722e2 100644
--- a/src/jit/lsraarmarch.cpp
+++ b/src/jit/lsraarmarch.cpp
@@ -99,7 +99,7 @@ void LinearScan::TreeNodeInfoInitCmp(GenTreePtr tree)
     }
     else
     {
-        assert((info->dstCount == 1) || tree->OperIs(GT_CMP));
+        assert((info->dstCount == 1) || tree->OperIs(GT_CMP, GT_TEST_EQ, GT_TEST_NE));
     }
 }
 
-- 
2.7.4

