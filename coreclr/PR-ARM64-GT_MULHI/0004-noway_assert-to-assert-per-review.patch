From 15d90c6be7058f7488f16918a4f23c400109c7d8 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Tue, 12 Sep 2017 11:44:47 -0400
Subject: [PATCH] noway_assert to assert per review

---
 src/jit/codegenarm64.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/jit/codegenarm64.cpp b/src/jit/codegenarm64.cpp
index d7eca41..a9f2fc2 100644
--- a/src/jit/codegenarm64.cpp
+++ b/src/jit/codegenarm64.cpp
@@ -1518,7 +1518,7 @@ void CodeGen::genCodeForMulHi(GenTreeOp* treeNode)
     assert(!varTypeIsFloating(targetType));
 
     // The arithmetic node must be sitting in a register (since it's not contained)
-    noway_assert(targetReg != REG_NA);
+    assert(targetReg != REG_NA);
 
     if (EA_SIZE(attr) == EA_8BYTE)
     {
@@ -1526,7 +1526,7 @@ void CodeGen::genCodeForMulHi(GenTreeOp* treeNode)
 
         regNumber r = emit->emitInsTernary(ins, attr, treeNode, op1, op2);
 
-        noway_assert(r == targetReg);
+        assert(r == targetReg);
     }
     else
     {
@@ -1559,10 +1559,10 @@ void CodeGen::genCodeForBinary(GenTree* treeNode)
     instruction ins = genGetInsForOper(treeNode->OperGet(), targetType);
 
     // The arithmetic node must be sitting in a register (since it's not contained)
-    noway_assert(targetReg != REG_NA);
+    assert(targetReg != REG_NA);
 
     regNumber r = emit->emitInsTernary(ins, emitTypeSize(treeNode), treeNode, op1, op2);
-    noway_assert(r == targetReg);
+    assert(r == targetReg);
 
     genProduceReg(treeNode);
 }
-- 
2.7.4

