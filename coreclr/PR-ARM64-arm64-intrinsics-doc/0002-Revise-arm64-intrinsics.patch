From c663f9f0ba10fb7bdad7a0fd9b87d340da12fbb4 Mon Sep 17 00:00:00 2001
From: Steve MacLean <sdmaclea.qdt@qualcommdatacenter.com>
Date: Tue, 5 Dec 2017 14:27:27 -0500
Subject: [PATCH] Revise arm64-intrinsics

Respond to feedback
Revise namespace recommendations
Add goals
Fix namespace vs. class issues
Add API review details
---
 Documentation/design-docs/arm64-intrinsics.md | 298 +++++++++++++++-----------
 1 file changed, 175 insertions(+), 123 deletions(-)

diff --git a/Documentation/design-docs/arm64-intrinsics.md b/Documentation/design-docs/arm64-intrinsics.md
index de501d6..41f2348 100644
--- a/Documentation/design-docs/arm64-intrinsics.md
+++ b/Documentation/design-docs/arm64-intrinsics.md
@@ -1,9 +1,21 @@
-## Arm64 Intrinsics
+# Arm64 Intrinsics
 
-This document is intended to document proposed design decision related to the introduction
+This document is intended to document proposed design decisions related to the introduction
 of Arm64 Intrinsics
 
-### Intrinsics in general
+## Document Goals
+
++ Discuss design options
+  + Document existing design pattern
+  + Draft initial design decisions which are least likely to cause extensive rework
++ Decouple `X86`, `X64`, `ARM32` and `ARM64` development
+  + Make some minimal decisions which encourage API similarity between platforms
+  + Make some additional minimal decisions which allow `ARM32` and `ARM64` API's to be similar
++ Decouple CoreCLR implementation and testing from API design
++ Allow for best API design
++ Keep implementation simple
+
+## Intrinsics in general
 
 Use of intrinsics in general is a CoreCLR design decision to allow low level platform
 specific optimizations.
@@ -14,147 +26,219 @@ apps to use such optimizations.  The intended usage model is to allow library
 developers access to low level functions which enable optimization of key
 functions.  As such the use is expected to be limited, but performance critical.
 
-#### Intrinsic `IsSupported` granularity
+## Intrinsic granularity
 
-The existing implementation is using `IsSupported` to determine whether an existing
-namespace is supported on a given platform.
+In general individual intrinsic will be chosen to be fine grained.  These will generally
+correspond to a single assembly instruction.
 
-The granularity is kept at a large scale to have large blocks of functionality controlled
-by a single `IsSupported`.
+## Logical Sets of Intrinsics
 
-#### Intrinsic granularity
+Individual CPU instantiate a specific set of instructions.  For various reasons, an
+individual CPU will have a specific set of supported instructions.  for `ARM64` the
+set of supported instructions is identified by various `ID_* System registers`.
+While these feature registers are only available for the OS to access, they provide
+a logical grouping of instructions which are enable/disabled to gether.
 
-In general individual intrinsic will be chosen to be fine grained.  These will generally correspond to a single assembly instruction.
+### API Logical Set grouping & `IsSupported`
 
-#### Intrinsics & Crossgen
+The C# API must provide a mechanism to determine which sets of instructions are supported.
 
-For any intrinsic which may not be supported on all variants of a platform.  Crossgen
-Method compilation must be trapped, so that the JIT is forced to generate optimal platform dependent 
-code at runtime.
+Existing design uses a separate `static class` to group the methods which correspond to each
+logical set of instructions.
 
-#### API review
+A single `IsSupported` property is included in each `static class` to allow client code to alter
+control flow.
 
-Intrinsics will extend the API of CoreCLR.  They will need to follow standard API review practices.
+The `IsSupported` properties are design so that JIT can remove code on unused paths.
+
+`ARM64` will use an identical approach.
+
+### API `PlatformNotSupported` Exception
+
+If client code calls an intrinsic which is not supported by the platform a `PlatformNotSupported`
+exception must be thrown.
+
+### JIT, VM & OS requirements
+
+The JIT must use a set of flags corresponding to logical sets of instructions to alter code
+generation.
+
+The VM must query the OS to populate the set of JIT flags.
+
+Each OS must provide mechanism for determining which sets of instructions are supported.
 
-### Choice of Arm64 naming conventions
++ Linux provides the HWCAP detection mechanism which is able to detect current set of exposed
+features
++ Arm64 MAC OS and Arm64 Windows OS must provide an equally capable detection mechanism.
 
-#### Namespaces
+In the event the OS fails to provides a means to detect a support for an instruction set extension
+it must be treated as unsupported.
 
-`ARM32` and `ARM64` will follow similar namespace conventions.
+NOTE: Exceptions might be where :
+
++ CoreCLR is distributed as source and CMake build configuration test is used  detect these features
++ Installer detects features and sets appropriate configuration knobs
++ VM runs code inside safe try/catch blocks to test for instruction support
++ Platform requires a specific minimum set of instructions
+
+### Intrinsics & Crossgen
+
+For any intrinsic which may not be supported on all variants of a platform.  Crossgen Method
+compilation must be trapped, so that the JIT is forced to generate optimal platform dependent
+code at runtime.
+
+## Choice of Arm64 naming conventions
+
+`x86`, `x64`, `ARM32` and `ARM64` will follow similar naming conventions.
+
+### Namespaces
 
 + `System.Runtime.Intrinsics` is used for type definitions useful across multiple platforms
-+ `System.Runtime.Intrinsics.Arm` is used for enumerations shared across `ARM32` and `ARM64` platforms
-+ `System.Runtime.Intrinsics.Arm.Base` is recommended for functionality included in all `ARM32` and `ARM64` platforms
-  + Do we need this or could we assume `ARMv8` is minimum supported platform?
-  + Should we assume `ARMv7` or `ARMv5` is minimum supported platform?
-+ `System.Runtime.Intrinsics.Arm.ARMv8` is used for `ARMv8` added functionality included in both `ARM32` and `ARM64` platforms 
-+ `System.Runtime.Intrinsics.Arm.ARMv8.Arm64` is used for `ARMv8` functionality only included in `ARM64` platform
-+ `System.Runtime.Intrinsics.Arm.ARMv8_1....` is used for `ARMv8.1` functionality.  
-  + Use similar sub namespace names for only included in `ARM64` platform ...
-+ `System.Runtime.Intrinsics.Arm.XXX` is used for optional features `CRC32`, `AES`, `SHA1` ... 
-  + All extensions which were not required when they were initially introduced
-  + For example, `CRC32` became required with `ARMv8.1`, but since it was introduced as optional in `ARMv8` it would go in its own namespace
++ `System.Runtime.Intrinsics.Arm` is used type definitions shared across `ARM32` and `ARM64` platforms
++ `System.Runtime.Intrinsics.Arm.Arm64` is used for type definitions for the `ARM64` platform
+  + The primary implementation of `ARM64` intrinsics wil occur within this namespace
+  + While `x86` and `x64` share a common namespace.  This document is recommending a separate namespace
+  for `ARM32` and `ARM64`.  This is because `AARCH64` is a separate `ISA` from the `AARCH32` `Arm` & `Thumb`
+  instruction sets.  It is not an `ISA` extension, but rather a new `ISA`.  This is different from `x64`
+  which could be viewed as a superset of `x86`.
+  + The logical grouping of `ARM64` and `ARM32` instruction sets is different.  It is controlled by
+  different sets of `System Registers`.
 
-If an extension is only supported on `Arm32`, there is no reason to add a sub namespace.
+For the convenience of the end user, it may be useful to add convenience API's which expose functionality
+which is common across platforms and sets of platforms.  These could be implemented in terms of the
+platform specific functionality.  These API's are currently out of scope of this initial design document.
 
-+ `System.Runtime.Intrinsics.Arm.ARMv7` is used for `ARMv7` added functionality not included in `Base`
+### Logical Set Class Names
 
-If an extension is only supported on `Arm64`, there is no reason to add a sub namespace.  Hypothetically:
+Within the `System.Runtime.Intrinsics.Arm.Arm64` namespace there will be a separate `static class` for each
+logical set of instructions
 
-+ `System.Runtime.Intrinsics.Arm.ARMv10` is used for `ARMv10` added functionality (Hypothetically `Arm64` only)
+The sets will be chosen to match the granularity if the `ARM64` `ID_*` register fields.
 
-Namespace is chosen based on what could be implemented, not on what is or will be implemented.
+#### Specific Class Names
 
-#### Names
+TBD Add table to document each known extension and recommended `static class` name.
 
-Intrinsics will be named to describe functionality.  Names will not correspond to specific named assembly instructions.
+### Intrinsic Method Names
 
-`IsSupported` will be used in any namespace which may not be implemented on all CoreCLR platforms
+Intrinsics will be named to describe functionality.  Names will not correspond to specific named
+assembly instructions.
 
-### Intrinsic Interface Documentation
+Where precedence exists within the `System.Runtime.Intrinsics.X86` namespace, identical method names will be
+chosen: `Add`, `Multiply`, `Load`, `Store` ...
 
-+ Documentation will be minimal preferring the underlying ARM documentation
-+ Namespaces will briefly document corresponding specification
-+ Intrinsic methods will briefly document corresponding assembly instruction(s) for each platform
+### Intinsic Method Argument Types
 
-### Test coverage
+Intrinsic methods will typically use a standard set of argument types:
++ Integer type: `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`
++ Floating types: `double`, `single`, `System.Half`
++ Vector types: Vector128<T>
++ SVE will add new vector types: TBD
 
-As intrinsic support is added test coverage must be extended to provide basic testing
+## Intrinsic Interface Documentation
+
++ Namespace
++ Each `static class` will
+  + Briefly document corresponding `System Register Field and Value` from ARM specification.
+  + Document use of IsSupported property
+  + Optionally summarize set of methods enabled by the extension
++ Each intrinsic method will
+  + Document underlying `ARM64` assembly instruction
+  + Optionally, briefly summarize operation performed
+    + In many cases this may be unnecessary: `Add`, `Multiply`, `Load`, `Store`
+    + In some cases this may be difficult to do correctly. (Crypto instructions)
 
-### Phased Implementation
+## Phased Implementation
 
-#### Implementation Priorities
+### Implementation Priorities
 
-As guidelines:
+As rough guidelines for order of implementation:
 
 + Baseline functionality will be prioritized over architectural extensions
 + Architectural extensions will typically be prioritized in age order.  Earlier extensions will be added first
-+ `ARM64` only and `ARM*` features will have equal priority
+  + This is primarily driven by availability of hardware.  Features released in earlier will be prevalent in
+  more hardware.
 + Priorities will be driven by optimization efforts and requests
-+ Priority will be given to intrinsics which have already been implemented for other platforms
-+ Priority will be given to intrinsics which are equivalent/similar to those actively used in libraries for other platforms
+  + Priority will be given to intrinsics which are equivalent/similar to those actively used in libraries for other platforms
+  + Priority will be given to intrinsics which have already been implemented for other platforms
 
-#### Addition of new intrinsics namespaces
-When an intrinsic namespace is introduced code will likely be implemented on different platforms at different times.
+### API review
 
-It is explicitly OK for ARM64 to implement a namespace which may be implemented on `ARM32` w/o `ARM32` implementation.
-The opposite is also true.
+Intrinsics will extend the API of CoreCLR.  They will need to follow standard API review practices.
+
+#### API review of a new intrinsic `static class`es
+
+Review will be facilitated by GitHub Issues requests.
+
+API reviews will be completed within the CoreFX project.
+
+A separate GitHub Issue will be created for the review of each intrinsic `static class`.  This allows design and review team to
+review separately.  This allows reviw complexity to be kept manageable.  The O(N^2) nature of the review process will be kept to 
+reasonable levels and iterations will be finite.
 
-Any platform which does not implement a namespace, must:
+Every effort will be made to completely elaborate all the methods of the intrinsic `static class` for each review.  This will 
+help minimize reopening the same classes for review.
 
-+ Return `false` for `IsSupported`
-+ `throw` on any unimplemented function
+Implementation will be kept separate from from API review.
 
-#### Partial implementation of intrinsic namespace
+### Partial implementation of intrinsic `static class`
 
-+ It is preferred that `IsSupported` represents the state of an entire namespace
-+ It is certainly required at time of a release, `IsSupported` represents the state of an entire namespace
-+ Allow for writing tests and implementing code, `IsSupported == false` may be used when namespace is partially implemented
++ `IsSupported` must represents the state of an entire intrinsic `static class`
++ Once API review is complete and approved, it is acceptable to implement approved methods in any order provided tests
+
+### Addition of new intrinsics methods to an existing `static class`
+
+Since each `ARM64` intrinsic `static class` only supports a single platform, adding new instructions is not
+inherently problematic.  New methods can be added without undue complexity.
+
+The primary problem would be the API review process
+
+### Test coverage
 
-#### Addition of new intrinsics to existing namespace
-When an intrinsic namespace is introduced, a best guess will be made about the set of useful intrinsics.
-However, the intrinsics will be added as needed or requested for various optimization efforts.
+As intrinsic support is added test coverage must be extended to provide basic testing
 
-+ The set of intrinsics instructions supported by a namespace should only be allowed
-if all platforms reporting `IsSupported` are supported (at least at time of release)
-+ It may be preferable to add new namespaces in cases where this creates significant burden
+Tests 
 
-### Half precision floating point
+## Half precision floating point
 
 This document will refer to half precision floating point as `Half`.
 
 + Machine learning and Artificial intelligence often use `Half` type to simplify storage and improve processing time.
 + CoreCLR and `CIL` in general do not have general support for a `Half` type
 + There is an open request to expose `Half` intrinsics
-+ ARM64 will introduce `System.Runtime.Intrinsics.Half` to support this request 
-+ `Half` will be defined as:
-
-```
-    [StructLayout(LayoutKind.Sequential, Size = 2)]
-    public struct Half : struct {}
-``` 
++ There is an outstanding proposal to add `System.Half` to support this request
++ Implementation of `Half` features will be adjusted based on
+  + Implementation of the `System.Half` proposal
+  + Availability of supporting hardware (extensions)
+  + General language extensions supporting `Half`
 
-#### ARMv8 Half precision support
+### ARMv8 Half precision support
 
 ARMv8 baseline support for `Half` is limited.  The following operations are supported
 
 + Loads and Stores
 + Conversion to/from `Float`
 + Widening from `Vector128<Half>` to two `Vector128<Float>`
-+ Narrowing from two `Vector128<Float>` to `Vector128<Float>`
++ Narrowing from two `Vector128<Float>` to `Vector128<Half>`
+
+Recent extension add support for
+
++ General operations on `Half` types
++ Vector operations on `Half` types
+
+### `Half` and ARM64 ABI
 
-It is presumed that even this minimal support could be helpful
+Any complete `Half` implementation must conform to the `ARM64 ABI`.
 
-Optional `Half` extensions add more complete support
+The proposed `System.Half` type must be treated as a floating point type for purposes of the ARM64 ABI
 
-#### `Half` and ARM64 ABI
+As an argument it must be passed in a floating point register.
 
-The proposed `Half` implementation will treat `Half` as raw bits.  
-It is likely therefore that this will not conform to the ARM64 ABI specifically with respect to the HFA
-calling convention.  This will hinder use of `Half` in `PInvoke` calls.  Resolving this ABI issue will
-be a low priority.
+As a structure member, it must be treated as a floating point type and enter into the HFA determination logic.
 
-### Scalable Vector Extension Support
+Test cases must be written and conformance must be demonstrated.
+
+## Scalable Vector Extension Support
 
 `SVE`, the Scalable Vector Extension introduces its own complexity.
 
@@ -166,52 +250,20 @@ The extension
 Therefore implementation will not be trivial.
 
 + Register allocator may need changes
-+ Crossgen of SVE intrinsics must be delayed until runtime JIT
 + SIMD support will face similar issues
 + Open issue: Should we use `Vector<T>` or SVE<T> in user interface design?
-+ SVE probably requires a separate design
-
-### Miscellaneous
-#### Choice of Arm64 naming conventions -- Rationale
-
-##### Naming conventions
 
-+ Namespaces are generally using Pascal case
-+ Namespaces and Names must not start with a number
-+ Names are descriptive.  Therefore intrinsics are generally named to describe functionality
+Given lack of available hardware and a lack of thorough understanding of the specification:
 
-`ARMv8` is assumed to be an abbreviation for `ARM Reference Manual Version 8`
++ SVE will require a separate design
++ SVE is considered out of scope for this document
 
-##### Reference x86 & x64 choice of namespaces
-
-+ `System.Runtime.Intrinsics` is used for type definitions useful across multiple platforms
-+ `System.Runtime.Intrinsics.X86` is used for enumerations shared across both platforms
-+ `System.Runtime.Intrinsics.AVX` is used for the instructions which are included in a specific hardware extension
-
-##### ARM Version history
-
-Looking at `ARM` version history, 
-
-+ The `ARM` instruction set is regularly extended: `ARMv5`, `ARMv7`, `ARMv8`
-+ New version are generally supersets of prior versions
-  + Deprecated features are preserved for at least one generation
-  + Deprecated features are eventually completely removed
-+ `ARMv8` was the first version to introduce 64-bit support
-  + Legacy ARMv7 was extended to become `ARMv8` `AARCH32` 
-  + `ARMv8` `AARCH64` was introduced
-  + `AARCH64` used similar but distinctly different instruction set
-  + `AARCH64` naming convention varied slightly from `AARCH32`
-+ `ARMv8.1` & `ARMv8.2` extensions have been introduced
-+ New instructions introduced by extensions have generally been asymmetric.  New `AARCH64` instructions ARMv8New extensions have generally made It is not uncommon for an extensions to include new instructions for 
-`AARCH64`
-....  With the introduction of `ARMv8`, `aarch64` (`ARM64`) and `aarch32` were
-split.  The legacy ARMv7 instruction encodings were only supported in `aarch32`
-
-#### Handling Instruction Deprecation
+## Miscellaneous
+### Handling Instruction Deprecation
 
 Deprecation of instructions should be relatively rare
 
 + Do not introduce an intrinsic for a feature that is currently deprecated
 + In event an assembly instruction is deprecated
   1. Prefer emulation using alternate instructions if practical
-  2. Add `SetThrowOnDeprecated()` interface to allow developpers to find these issues
+  2. Add `SetThrowOnDeprecated()` interface to allow developers to find these issues
-- 
2.7.4

