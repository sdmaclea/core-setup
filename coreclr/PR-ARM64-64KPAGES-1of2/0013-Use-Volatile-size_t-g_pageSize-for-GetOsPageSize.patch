From 5c2f5871770eaf6849f22d6e216e6e31b50e1c08 Mon Sep 17 00:00:00 2001
From: "Steve MacLean, Qualcomm Datacenter Technologies, Inc"
 <sdmaclea@qti.qualcomm.com>
Date: Wed, 19 Apr 2017 17:12:07 +0000
Subject: [PATCH] Use Volatile<size_t> g_pageSize for GetOsPageSize()

---
 src/utilcode/util.cpp | 22 +++++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/src/utilcode/util.cpp b/src/utilcode/util.cpp
index 3fc8393..295da71 100644
--- a/src/utilcode/util.cpp
+++ b/src/utilcode/util.cpp
@@ -18,6 +18,7 @@
 #include "sigparser.h"
 #include "cor.h"
 #include "corinfo.h"
+#include "volatile.h"
 
 
 const char g_RTMVersion[]= "v1.0.3705";
@@ -1321,17 +1322,24 @@ size_t GetOsPageSizeUncached()
     return sysInfo.dwAllocationGranularity ? sysInfo.dwAllocationGranularity : 0x1000;
 }
 
+namespace
+{
+    Volatile<size_t> g_pageSize = 0;
+}
+
 size_t GetOsPageSize()
 {
 #ifdef FEATURE_PAL
-    // Initialization of function-local statics is guaranteed to occur only
-    // once even when called from multiple threads (from http://en.cppreference.com/w/cpp/thread/call_once)
-    //
-    // However there is a real potential performance cost.  This will need to
-    // be optimized if GetOsPageSize() shows up in profiles.
-    static const size_t pageSize(GetOsPageSizeUncached());
+    size_t result = g_pageSize.LoadWithoutBarrier();
+
+    if(!result)
+    {
+        result = GetOsPageSizeUncached();
+
+        g_pageSize.StoreWithoutBarrier(result);
+    }
 
-    return pageSize;
+    return result;
 #else
     return 0x1000;
 #endif
-- 
2.7.4

